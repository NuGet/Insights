@{
    var title = Model.Name.Humanize().Replace("csv", "CSV");
    var isEnabled = Model.IsEnabledInConfig && Model.IsEnabledInStorage != false;

    var error = TempData[Model.Name + ".Error"]?.ToString();
    var success = TempData[Model.Name + ".Success"]?.ToString();
    var hasError = !string.IsNullOrEmpty(error);
    var hasSuccess = !hasError && !string.IsNullOrEmpty(success);
    var message = error ?? success;
    var messageFontClass = hasError || hasSuccess ? "text-white" : string.Empty;
    var messageBgClass = hasError ? "bg-danger" : (hasSuccess ? "bg-success" : string.Empty);
    var borderClass = hasError ? "border-danger" : (hasSuccess ? "border-success" : string.Empty);

    string statusText;
    string statusTitle;
    string inlineStatus;
    if (Model.IsRunning)
    {
        statusText = "‚åõ";
        statusTitle = "The timer is running.";
        inlineStatus = "running";
    }
    else if (!isEnabled)
    {
        statusText = null;
        statusTitle = null;
        inlineStatus = "disabled";
    }
    else
    {
        statusText = "‚è±Ô∏è";
        statusTitle = "The timer is scheduled.";
        inlineStatus = "scheduled";
    }

    string nextRun;
    if (!isEnabled)
    {
        nextRun = "disabled";
    }
    else
    {
        var nextRunTimestamp = Model.LastExecuted.GetValueOrDefault(DateTimeOffset.MinValue) + Model.Frequency;
        var untilNextRun = nextRunTimestamp - DateTimeOffset.UtcNow;
        if (untilNextRun > TimeSpan.Zero)
        {
            nextRun = untilNextRun.Humanize(precision: 2, minUnit: Humanizer.Localisation.TimeUnit.Second);
        }
        else
        {
            nextRun = "any minute now";
        }
    }

    string lastStarted = null;
    if (Model.LastExecuted.HasValue)
    {
        lastStarted = (DateTimeOffset.UtcNow - Model.LastExecuted.Value).Humanize(precision: 2) + " ago";
    }
    else
    {
        lastStarted = "never";
    }
}
<CollapseCard IdPrefix="@Model.Name" Title="@title" StatusText="@statusText" StatusTitle="@statusTitle" BorderClass="@borderClass">
    <ul class="list-group list-group-flush">
        <li class="list-group-item">
            <b>Status:</b> @inlineStatus
        </li>
        <li class="list-group-item">
            <b>Frequency:</b> @Model.Frequency.Humanize()
        </li>
        <li class="list-group-item">
            <b>Last started:</b> @lastStarted
        </li>
        <li class="list-group-item">
            <b>Next run:</b> @nextRun
        </li>
    </ul>

    @if (message != null)
    {
        <ul class="list-group list-group-flush">
            <li class="list-group-item @messageFontClass @messageBgClass">@((MarkupString)message)</li>
        </ul>
    }

    <div class="card-body">
        <form action="@Url.Action("UpdateTimer")" method="post" class="form-inline">
            <input type="hidden" name="timerName" value="@Model.Name" />
            <button type="submit" class="btn btn-primary mr-1" name="runNow" value="true" disabled="@(!Model.IsEnabledInConfig)">Run now</button>
            @if (isEnabled)
            {
                <button type="submit" class="btn btn-warning mr-1" name="disable" value="true">Disable</button>
            }
            else
            {
                <button type="submit" class="btn btn-success mr-1" disabled="@(!Model.IsEnabledInConfig)" name="enable"
                        value="true">Enable</button>
            }

            @if (Model.CanAbort && Model.IsRunning)
            {
                <button type="submit" class="btn btn-danger mr-1" name="abort" value="true"
                        data-message="Are you sure you want to abort this running timer? Note that blob and table storage is cleaned up in a best effort but some queue messages may still get processed. The timer will also be disabled in the process.">Abort</button>
            }

            @if (Model.CanDestroy)
            {
                <button type="submit" class="btn btn-danger mr-1" name="reset"
                    data-message="Are you sure you want to reset the timer? This will delete the output. It's best to do this when the timer is not running."
                    value="true">üí£ Reset</button>
            }

            @if (!Model.IsEnabledInConfig)
            {
                <b>‚ö†Ô∏è This timer is disabled due to missing configuration.</b>
            }
        </form>
    </div>
</CollapseCard>

@code {
    [Parameter]
    public TimerState Model { get; set; }

    [Parameter]
    public ITempDataDictionary TempData { get; set; }

    [Parameter]
    public IUrlHelper Url { get; set; }
}
