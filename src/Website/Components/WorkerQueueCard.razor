@{
    var id = Model.QueueType.ToString() + "Queue";

    var error = TempData[id + ".Error"]?.ToString();
    var success = TempData[id + ".Success"]?.ToString();
    var hasError = !string.IsNullOrEmpty(error);
    var hasSuccess = !hasError && !string.IsNullOrEmpty(success);
    var message = error ?? success;
    var messageFontClass = hasError || hasSuccess ? "text-white" : string.Empty;
    var messageBgClass = hasError ? "bg-danger" : (hasSuccess ? "bg-success" : string.Empty);
    var borderClass = hasError ? "border-danger" : (hasSuccess ? "border-success" : string.Empty);

    string statusText = null;
    string statusTitle = null;
    if (Model.PoisonApproximateMessageCount > 0)
    {
        statusText = "⚠";
        statusTitle = "There are messages in the dead letter queue.";
    }
    else if (Model.ApproximateMessageCount > 0)
    {
        statusText = "⌛";
        statusTitle = "There are messages being processed.";
    }
}

<CollapseCard IdPrefix="@id" Title="@id.Humanize()" StatusText="@statusText" StatusTitle="@statusTitle" Collapsed="false" BorderClass="@borderClass">
    <ul class="list-group list-group-flush">
        <li class="list-group-item"><b>Main - approximate message count:</b> @Model.ApproximateMessageCount</li>
        <li class="list-group-item"><b>Main - available messages:</b> @(Model.AvailableMessageCountIsExact ? string.Empty : "≥") @Model.AvailableMessageCountLowerBound</li>
        <li class="list-group-item"><b>Poison - approximate message count:</b> @Model.PoisonApproximateMessageCount</li>
        <li class="list-group-item"><b>Poison - available messages:</b> @(Model.PoisonAvailableMessageCountIsExact ? string.Empty : "≥") @Model.PoisonAvailableMessageCountLowerBound</li>
    </ul>
    <div class="card-body border-top form-inline">
        <form action="@Url.Action("ClearQueue")" method="post" class="mr-1">
            <input type="hidden" name="queueType" value="@Model.QueueType" />
            <button type="submit" class="btn btn-danger" name="poison" value="false"
                    data-message="Are you sure you want to clear the @(Model.QueueType) main queue? This may cause long running flows to hang indefinitely, waiting for the dropped queue messages to be completed. You may need to manually clean up these flows before proceeding.">
                Clear main queue
            </button>
            <button type="submit" class="btn btn-danger" name="poison" value="true"
                    data-message="Are you sure you want to clear the @(Model.QueueType) poison queue? Another option would be to move the poison queue messages to the main queue so they can be tried again.">
                Clear poison queue
            </button>
        </form>
        <form action="@Url.Action("MoveMessages")" method="post" class="mr-1">
            <input type="hidden" name="source" value="@Model.QueueType" />
            <input type="hidden" name="isPoisonSource" value="true" />
            <input type="hidden" name="destination" value="@Model.QueueType" />
            <input type="hidden" name="isPoisonDestination" value="false" />
            <button type="submit" class="btn btn-warning" disabled="@(Model.MovePoisonToMainState != MoveQueueMessagesState.None)">
                Move poison queue to main queue
                @{
                    switch (Model.MovePoisonToMainState)
                    {
                        case MoveQueueMessagesState.Working:
                            <text>- working ⌛</text>
                            break;
                        case MoveQueueMessagesState.Scheduled:
                            <text>- scheduled ⏱️</text>
                            break;
                    }
                }
            </button>
        </form>
        <form action="@Url.Action("MoveMessages")" method="post">
            <input type="hidden" name="source" value="@Model.QueueType" />
            <input type="hidden" name="isPoisonSource" value="false" />
            <input type="hidden" name="destination" value="@Model.QueueType" />
            <input type="hidden" name="isPoisonDestination" value="true" />
            <button type="submit" class="btn btn-danger" disabled="@(Model.MoveMainToPoisonState != MoveQueueMessagesState.None)"
                    data-message="Are you sure you want to move messages from the main queue to the poison queue? This may cause long running flows to hang indefinitely, waiting for the dropped queue messages to be completed.">
                Move main queue to poison queue
                @{
                    switch (Model.MoveMainToPoisonState)
                    {
                        case MoveQueueMessagesState.Working:
                            <text>- working ⌛</text>
                            break;
                        case MoveQueueMessagesState.Scheduled:
                            <text>- scheduled ⏱️</text>
                            break;
                    }
                }
            </button>
        </form>
    </div>

    @if (message != null)
    {
        <ul class="list-group list-group-flush">
            <li class="list-group-item @messageFontClass @messageBgClass">@((MarkupString)message)</li>
        </ul>
    }
</CollapseCard>

@code {
    [Parameter]
    public QueueViewModel Model { get; set; }

    [Parameter]
    public ITempDataDictionary TempData { get; set; }

    [Parameter]
    public IUrlHelper Url { get; set; }
}
