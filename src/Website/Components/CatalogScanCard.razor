@{
    var error = TempData[Model.DriverType + ".Error"]?.ToString();
    var success = TempData[Model.DriverType + ".Success"]?.ToString();
    var hasError = !string.IsNullOrEmpty(error);
    var hasSuccess = !hasError && !string.IsNullOrEmpty(success);
    var message = error ?? success;
    var messageFontClass = hasError || hasSuccess ? "text-white" : string.Empty;
    var messageBgClass = hasError ? "bg-danger" : (hasSuccess ? "bg-success" : string.Empty);
    var borderClass = hasError ? "border-danger" : (hasSuccess ? "border-success" : string.Empty);

    string statusText = null;
    string statusTitle = null;
    var latestIsAborted = Model.LatestScans.FirstOrDefault()?.State == CatalogIndexScanState.Aborted;
    var isRunning = Model.LatestScans.Any(x => !x.State.IsTerminal());
    if (latestIsAborted)
    {
        statusText = "‚ö†Ô∏è";
        statusTitle = "The latest scan has been aborted.";
    }
    else if (isRunning)
    {
        statusText = "‚åõ";
        statusTitle = "A catalog scan is running.";
    }

    var title = Model.DriverType.GetTitle();
}
<CollapseCard IdPrefix="@Model.DriverType.ToString()" Title="@title" StatusText="@statusText" StatusTitle="@statusTitle" BorderClass="@borderClass">
    <ul class="list-group list-group-flush">
        <li class="list-group-item"><b>Cursor:</b> @Model.Cursor.Value.ToZulu()</li>
        <li class="list-group-item"><b>Cursor age:</b> @Model.CursorAge.Humanize(precision: 7, maxUnit: Humanizer.Localisation.TimeUnit.Year, minUnit: Humanizer.Localisation.TimeUnit.Second)</li>
        <li class="list-group-item">
            <b>Driver dependencies:</b> @string.Join(", ", Model.Dependencies.Select(x => x.GetTitle()).DefaultIfEmpty("none"))
        </li>
    </ul>

    <div class="card-body border-top">
        <form action="@Url.Action("UpdateCatalogScan")" method="post" class="form-inline">
            <fieldset disabled="@(!Model.IsEnabled)" class="form-group">
                <input type="hidden" name="driverType" value="@Model.DriverType" />
                @if (!Model.OnlyLatestLeavesSupport.HasValue)
                {
                    <div class="form-check mr-1">
                        <input class="form-check-input" type="checkbox" id="@Model.DriverType.ToString()-onlyLatestLeaves" name="onlyLatestLeaves" checked="checked" value="true" />
                        <label class="form-check-label" for="@Model.DriverType.ToString()-onlyLatestLeaves"
                               title="Only process the latest catalog leaf per package. This is generally a good idea since most drivers don't need to reprocess a package multiple times if it has multiple catalog leaves.'">Only latest leaves</label>
                    </div>
                }
                <div class="form-check mr-1">
                    <input class="form-check-input" type="checkbox" id="@Model.DriverType.ToString()-useCustomCursor" name="useCustomCursor" value="true" />
                    <label class="form-check-label" for="@Model.DriverType.ToString()-useCustomCursor"
                           title="Use a custom max cursor value for starting the next catalog scan or for overriding the current cursor value.">Use custom cursor</label>
                </div>
                <div class="form-group custom-cursor mr-1" style="display: none">
                    <label class="sr-only" for="@Model.DriverType-cursor">Custom cursor</label>
                    <input type="text" class="form-control" name="cursor" id="@Model.DriverType-cursor" value="@Model.DefaultMax.ToZulu()">
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary mr-1" name="start" disabled="@isRunning" value="true">
                        Start
                        @if (isRunning)
                        {
                            <text>(already running)</text>
                        }
                    </button>
                    <button type="submit" class="btn btn-danger mr-1" name="overrideCursor" value="true" style="display: none"
                            data-message="Are you sure you want to override the cursor value on the '@title' catalog scan driver? If the new cursor value is later than the current value, some packages will likely not get processed. If the new cursor value is earlier than the current value, some packages will be reprocessed, which is typically harmless.">
                        Override cursor
                    </button>
                    @if (Model.LatestScans.Any(x => !x.State.IsTerminal()))
                    {
                        <button type="submit" class="btn btn-danger mr-1" name="abort" value="true"
                                data-message="Are you sure you want to abort the running catalog scan? Note that blob and table storage is cleaned up in a best effort but some queue messages may still get processed. The cursor will not move forward.">
                            Abort
                        </button>
                    }
                    <button type="submit" class="btn btn-danger mr-1" name="reset" value="true"
                            data-message="Are you sure you want to reset the driver? This will delete the output and reset the cursor to the beginning of time. It's best to do this when no catalog scan is running.">
                        üí£ Reset
                    </button>
                    @if (!Model.IsEnabled)
                    {
                        <b>‚ö†Ô∏è This driver is disabled in configuration.</b>
                    }
                </div>
            </fieldset>
        </form>
    </div>

    @if (latestIsAborted)
    {
        <ul class="list-group list-group-flush">
            <li class="list-group-item bg-warning">
                The latest catalog scan has been aborted. You must manually start another.
            </li>
        </ul>
    }

    @if (message != null)
    {
        <ul class="list-group list-group-flush">
            <li class="list-group-item @messageFontClass @messageBgClass">@((MarkupString)message)</li>
        </ul>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Scan ID</th>
                <th>State</th>
                <th>Min</th>
                <th>Max</th>
                <th>Runtime</th>
            </tr>
        </thead>
        <tbody class="smaller-text">
            @foreach (var scan in Model.LatestScans)
            {
                <tr>
                    <td>@scan.ScanId</td>
                    <td>@scan.State</td>
                    <td>@scan.Min?.ToZulu()</td>
                    <td>@scan.Max?.ToZulu()</td>
                    <td>@scan.Completed.GetRuntime(scan.Started)</td>
                </tr>
            }

            @if (Model.LatestScans.Count == 0)
            {
                <tr>
                    <td colspan="5" class="text-center">
                        <i>No scans have been started.</i>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</CollapseCard>

@code {
    [Parameter]
    public CatalogScanViewModel Model { get; set; }

    [Parameter]
    public ITempDataDictionary TempData { get; set; }

    [Parameter]
    public IUrlHelper Url { get;  set; } 
}
