// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.ComponentModel.DataAnnotations;

namespace NuGet.Insights.Worker.CatalogDataToCsv
{
    [CsvRecord]
    public partial record PackageVulnerabilityRecord : PackageRecord, IAggregatedCsvRecord<PackageVulnerabilityRecord>
    {
        public PackageVulnerabilityRecord()
        {
        }

        public PackageVulnerabilityRecord(Guid scanId, DateTimeOffset scanTimestamp, PackageDeleteCatalogLeaf leaf) : base(scanId, scanTimestamp, leaf)
        {
            ResultType = PackageVulnerabilityResultType.Deleted;
        }

        public PackageVulnerabilityRecord(Guid scanId, DateTimeOffset scanTimestamp, PackageDetailsCatalogLeaf leaf) : base(scanId, scanTimestamp, leaf)
        {
        }

        [Required]
        public PackageVulnerabilityResultType ResultType { get; set; }

        public int? GitHubDatabaseKey { get; set; }
        public string AdvisoryUrl { get; set; }
        public int? Severity { get; set; }

        public static string CsvCompactMessageSchemaName => "cc.pvu";
        public static IEqualityComparer<PackageVulnerabilityRecord> KeyComparer { get; } = PackageVulnerabilityRecordKeyComparer.Instance;
        public static IReadOnlyList<string> KeyFields { get; } = [nameof(Identity), nameof(AdvisoryUrl)];

        public static List<PackageVulnerabilityRecord> Prune(List<PackageVulnerabilityRecord> records, bool isFinalPrune, IOptions<NuGetInsightsWorkerSettings> options, ILogger logger)
        {
            return PackageRecordExtensions.Prune(records, isFinalPrune);
        }

        public int CompareTo(PackageVulnerabilityRecord other)
        {
            var c = base.CompareTo(other);
            if (c != 0)
            {
                return c;
            }

            return string.CompareOrdinal(other.AdvisoryUrl, AdvisoryUrl);
        }

        public class PackageVulnerabilityRecordKeyComparer : IEqualityComparer<PackageVulnerabilityRecord>
        {
            public static PackageVulnerabilityRecordKeyComparer Instance { get; } = new();

            public bool Equals(PackageVulnerabilityRecord x, PackageVulnerabilityRecord y)
            {
                if (ReferenceEquals(x, y))
                {
                    return true;
                }

                if (x is null || y is null)
                {
                    return false;
                }

                return x.Identity == y.Identity
                    && x.AdvisoryUrl == y.AdvisoryUrl;
            }

            public int GetHashCode([DisallowNull] PackageVulnerabilityRecord obj)
            {
                var hashCode = new HashCode();
                hashCode.Add(obj.Identity);
                hashCode.Add(obj.AdvisoryUrl);
                return hashCode.ToHashCode();
            }
        }
    }
}
