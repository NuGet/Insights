// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using NuGet.Insights;

namespace NuGet.Insights.Worker.CatalogDataToCsv
{
    /* Kusto DDL:

    .drop table CatalogLeafItems ifexists;

    .create table CatalogLeafItems (
        CommitId: string,
        CommitTimestamp: datetime,
        LowerId: string,
        Identity: string,
        Id: string,
        Version: string,
        Type: string,
        Url: string,
        PageUrl: string,
        IsListed: bool
    );

    .alter-merge table CatalogLeafItems policy retention softdelete = 30d;

    .alter table CatalogLeafItems policy partitioning '{'
      '"PartitionKeys": ['
        '{'
          '"ColumnName": "Identity",'
          '"Kind": "Hash",'
          '"Properties": {'
            '"Function": "XxHash64",'
            '"MaxPartitionCount": 256'
          '}'
        '}'
      ']'
    '}';

    .create table CatalogLeafItems ingestion csv mapping 'BlobStorageMapping'
    '['
        '{"Column":"CommitId","DataType":"string","Properties":{"Ordinal":0}},'
        '{"Column":"CommitTimestamp","DataType":"datetime","Properties":{"Ordinal":1}},'
        '{"Column":"LowerId","DataType":"string","Properties":{"Ordinal":2}},'
        '{"Column":"Identity","DataType":"string","Properties":{"Ordinal":3}},'
        '{"Column":"Id","DataType":"string","Properties":{"Ordinal":4}},'
        '{"Column":"Version","DataType":"string","Properties":{"Ordinal":5}},'
        '{"Column":"Type","DataType":"string","Properties":{"Ordinal":6}},'
        '{"Column":"Url","DataType":"string","Properties":{"Ordinal":7}},'
        '{"Column":"PageUrl","DataType":"string","Properties":{"Ordinal":8}},'
        '{"Column":"IsListed","DataType":"bool","Properties":{"Ordinal":9}}'
    ']'

    */
    partial record CatalogLeafItemRecord
    {
        public int FieldCount => 10;

        public void WriteHeader(TextWriter writer)
        {
            writer.WriteLine("CommitId,CommitTimestamp,LowerId,Identity,Id,Version,Type,Url,PageUrl,IsListed");
        }

        public void Write(List<string> fields)
        {
            fields.Add(CommitId);
            fields.Add(CsvUtility.FormatDateTimeOffset(CommitTimestamp));
            fields.Add(LowerId);
            fields.Add(Identity);
            fields.Add(Id);
            fields.Add(Version);
            fields.Add(Type.ToString());
            fields.Add(Url);
            fields.Add(PageUrl);
            fields.Add(CsvUtility.FormatBool(IsListed));
        }

        public void Write(TextWriter writer)
        {
            CsvUtility.WriteWithQuotes(writer, CommitId);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CommitTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, LowerId);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Identity);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Type.ToString());
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Url);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PageUrl);
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(IsListed));
            writer.WriteLine();
        }

        public async Task WriteAsync(TextWriter writer)
        {
            await CsvUtility.WriteWithQuotesAsync(writer, CommitId);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(CommitTimestamp));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, LowerId);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Identity);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Id);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Version);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Type.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Url);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, PageUrl);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(IsListed));
            await writer.WriteLineAsync();
        }

        public ICsvRecord ReadNew(Func<string> getNextField)
        {
            return new CatalogLeafItemRecord
            {
                CommitId = getNextField(),
                CommitTimestamp = CsvUtility.ParseDateTimeOffset(getNextField()),
                LowerId = getNextField(),
                Identity = getNextField(),
                Id = getNextField(),
                Version = getNextField(),
                Type = Enum.Parse<NuGet.Insights.CatalogLeafType>(getNextField()),
                Url = getNextField(),
                PageUrl = getNextField(),
                IsListed = CsvUtility.ParseNullable(getNextField(), bool.Parse),
            };
        }
    }
}
