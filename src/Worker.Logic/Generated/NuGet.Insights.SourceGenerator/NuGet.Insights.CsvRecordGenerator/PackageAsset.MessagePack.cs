// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using MessagePack;
using MessagePack.Formatters;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageAssetToCsv
{
    partial record PackageAsset
    {
        public class PackageAssetMessagePackFormatter : IMessagePackFormatter<PackageAsset>
        {
            public void Serialize(ref MessagePackWriter writer, PackageAsset value, MessagePackSerializerOptions options)
            {
                if (value is null)
                {
                    writer.WriteNil();
                    return;
                }

                writer.WriteArrayHeader(28);

                MessagePackSerializer.Serialize(ref writer, value.ScanId, options);
                MessagePackSerializer.Serialize(ref writer, value.ScanTimestamp, options);
                writer.Write(value.LowerId);
                writer.Write(value.Identity);
                writer.Write(value.Id);
                writer.Write(value.Version);
                MessagePackSerializer.Serialize(ref writer, value.CatalogCommitTimestamp, options);
                MessagePackSerializer.Serialize(ref writer, value.Created, options);
                writer.Write((int)value.ResultType);
                MessagePackSerializer.Serialize(ref writer, value.PatternSet, options);
                writer.Write(value.PropertyAnyValue);
                writer.Write(value.PropertyCodeLanguage);
                writer.Write(value.PropertyTargetFrameworkMoniker);
                writer.Write(value.PropertyLocale);
                writer.Write(value.PropertyManagedAssembly);
                writer.Write(value.PropertyMSBuild);
                writer.Write(value.PropertyRuntimeIdentifier);
                writer.Write(value.PropertySatelliteAssembly);
                writer.Write(value.Path);
                writer.Write(value.FileName);
                writer.Write(value.FileExtension);
                writer.Write(value.TopLevelFolder);
                writer.Write(value.RoundTripTargetFrameworkMoniker);
                writer.Write(value.FrameworkName);
                writer.Write(value.FrameworkVersion);
                writer.Write(value.FrameworkProfile);
                writer.Write(value.PlatformName);
                writer.Write(value.PlatformVersion);
            }

            public PackageAsset Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
            {
                var count = reader.ReadArrayHeader();
                if (count != 28)
                {
                    throw new MessagePackSerializationException($"Invalid array length: {count}");
                }

                var record = new PackageAsset();

                record.ScanId = MessagePackSerializer.Deserialize<System.Guid?>(ref reader, options);
                record.ScanTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.LowerId = reader.ReadString();
                record.Identity = reader.ReadString();
                record.Id = reader.ReadString();
                record.Version = reader.ReadString();
                record.CatalogCommitTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset>(ref reader, options);
                record.Created = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.ResultType = (NuGet.Insights.Worker.PackageAssetToCsv.PackageAssetResultType)reader.ReadInt32();
                record.PatternSet = MessagePackSerializer.Deserialize<NuGet.Insights.Worker.PackageAssetToCsv.PatternSetType?>(ref reader, options);
                record.PropertyAnyValue = reader.ReadString();
                record.PropertyCodeLanguage = reader.ReadString();
                record.PropertyTargetFrameworkMoniker = reader.ReadString();
                record.PropertyLocale = reader.ReadString();
                record.PropertyManagedAssembly = reader.ReadString();
                record.PropertyMSBuild = reader.ReadString();
                record.PropertyRuntimeIdentifier = reader.ReadString();
                record.PropertySatelliteAssembly = reader.ReadString();
                record.Path = reader.ReadString();
                record.FileName = reader.ReadString();
                record.FileExtension = reader.ReadString();
                record.TopLevelFolder = reader.ReadString();
                record.RoundTripTargetFrameworkMoniker = reader.ReadString();
                record.FrameworkName = reader.ReadString();
                record.FrameworkVersion = reader.ReadString();
                record.FrameworkProfile = reader.ReadString();
                record.PlatformName = reader.ReadString();
                record.PlatformVersion = reader.ReadString();

                return record;
            }
        }
    }
}