// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using MessagePack;
using MessagePack.Formatters;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageManifestToCsv
{
    partial record PackageManifestRecord
    {
        public class PackageManifestRecordMessagePackFormatter : IMessagePackFormatter<PackageManifestRecord>
        {
            public void Serialize(ref MessagePackWriter writer, PackageManifestRecord value, MessagePackSerializerOptions options)
            {
                if (value is null)
                {
                    writer.WriteNil();
                    return;
                }

                writer.WriteArrayHeader(41);

                MessagePackSerializer.Serialize(ref writer, value.ScanId, options);
                MessagePackSerializer.Serialize(ref writer, value.ScanTimestamp, options);
                writer.Write(value.LowerId);
                writer.Write(value.Identity);
                writer.Write(value.Id);
                writer.Write(value.Version);
                MessagePackSerializer.Serialize(ref writer, value.CatalogCommitTimestamp, options);
                MessagePackSerializer.Serialize(ref writer, value.Created, options);
                writer.Write((int)value.ResultType);
                MessagePackSerializer.Serialize(ref writer, value.Size, options);
                writer.Write(value.OriginalId);
                writer.Write(value.OriginalVersion);
                writer.Write(value.MinClientVersion);
                MessagePackSerializer.Serialize(ref writer, value.DevelopmentDependency, options);
                MessagePackSerializer.Serialize(ref writer, value.IsServiceable, options);
                writer.Write(value.Authors);
                writer.Write(value.Copyright);
                writer.Write(value.Description);
                writer.Write(value.Icon);
                writer.Write(value.IconUrl);
                writer.Write(value.Language);
                writer.Write(value.LicenseUrl);
                writer.Write(value.Owners);
                writer.Write(value.ProjectUrl);
                writer.Write(value.Readme);
                writer.Write(value.ReleaseNotes);
                MessagePackSerializer.Serialize(ref writer, value.RequireLicenseAcceptance, options);
                writer.Write(value.Summary);
                writer.Write(value.Tags);
                writer.Write(value.Title);
                writer.Write(value.PackageTypes);
                writer.Write(value.LicenseMetadata);
                writer.Write(value.RepositoryMetadata);
                writer.Write(value.ReferenceGroups);
                writer.Write(value.ContentFiles);
                writer.Write(value.DependencyGroups);
                writer.Write(value.FrameworkAssemblyGroups);
                writer.Write(value.FrameworkRefGroups);
                MessagePackSerializer.Serialize(ref writer, value.ContentFilesHasFormatException, options);
                MessagePackSerializer.Serialize(ref writer, value.DependencyGroupsHasMissingId, options);
                writer.Write(value.SplitTags);
            }

            public PackageManifestRecord Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
            {
                var count = reader.ReadArrayHeader();
                if (count != 41)
                {
                    throw new MessagePackSerializationException($"Invalid array length: {count}");
                }

                var record = new PackageManifestRecord();

                record.ScanId = MessagePackSerializer.Deserialize<System.Guid?>(ref reader, options);
                record.ScanTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.LowerId = reader.ReadString();
                record.Identity = reader.ReadString();
                record.Id = reader.ReadString();
                record.Version = reader.ReadString();
                record.CatalogCommitTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset>(ref reader, options);
                record.Created = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.ResultType = (NuGet.Insights.Worker.PackageManifestToCsv.PackageManifestRecordResultType)reader.ReadInt32();
                record.Size = MessagePackSerializer.Deserialize<int?>(ref reader, options);
                record.OriginalId = reader.ReadString();
                record.OriginalVersion = reader.ReadString();
                record.MinClientVersion = reader.ReadString();
                record.DevelopmentDependency = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.IsServiceable = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.Authors = reader.ReadString();
                record.Copyright = reader.ReadString();
                record.Description = reader.ReadString();
                record.Icon = reader.ReadString();
                record.IconUrl = reader.ReadString();
                record.Language = reader.ReadString();
                record.LicenseUrl = reader.ReadString();
                record.Owners = reader.ReadString();
                record.ProjectUrl = reader.ReadString();
                record.Readme = reader.ReadString();
                record.ReleaseNotes = reader.ReadString();
                record.RequireLicenseAcceptance = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.Summary = reader.ReadString();
                record.Tags = reader.ReadString();
                record.Title = reader.ReadString();
                record.PackageTypes = reader.ReadString();
                record.LicenseMetadata = reader.ReadString();
                record.RepositoryMetadata = reader.ReadString();
                record.ReferenceGroups = reader.ReadString();
                record.ContentFiles = reader.ReadString();
                record.DependencyGroups = reader.ReadString();
                record.FrameworkAssemblyGroups = reader.ReadString();
                record.FrameworkRefGroups = reader.ReadString();
                record.ContentFilesHasFormatException = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.DependencyGroupsHasMissingId = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.SplitTags = reader.ReadString();

                return record;
            }
        }
    }
}