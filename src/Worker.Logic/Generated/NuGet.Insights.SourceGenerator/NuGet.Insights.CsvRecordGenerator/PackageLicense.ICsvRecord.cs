// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageLicenseToCsv
{
    /* Kusto DDL:

    .drop table PackageLicenses ifexists;

    .create table PackageLicenses (
        LowerId: string,
        Identity: string,
        Id: string,
        Version: string,
        CatalogCommitTimestamp: datetime,
        Created: datetime,
        ResultType: string,
        Url: string,
        Expression: string,
        File: string,
        GeneratedUrl: string,
        ExpressionParsed: dynamic,
        ExpressionLicenses: dynamic,
        ExpressionExceptions: dynamic,
        ExpressionNonStandardLicenses: dynamic,
        ExpressionHasDeprecatedIdentifier: bool,
        FileSize: long,
        FileSHA256: string,
        FileContent: string
    ) with (docstring = "See https://github.com/NuGet/Insights/blob/main/docs/tables/PackageLicenses.md", folder = "");

    .alter-merge table PackageLicenses policy retention softdelete = 30d;

    .alter table PackageLicenses policy partitioning '{'
      '"PartitionKeys": ['
        '{'
          '"ColumnName": "Identity",'
          '"Kind": "Hash",'
          '"Properties": {'
            '"Function": "XxHash64",'
            '"MaxPartitionCount": 256'
          '}'
        '}'
      ']'
    '}';

    .create table PackageLicenses ingestion csv mapping 'BlobStorageMapping'
    '['
        '{"Column":"LowerId","DataType":"string","Properties":{"Ordinal":2}},'
        '{"Column":"Identity","DataType":"string","Properties":{"Ordinal":3}},'
        '{"Column":"Id","DataType":"string","Properties":{"Ordinal":4}},'
        '{"Column":"Version","DataType":"string","Properties":{"Ordinal":5}},'
        '{"Column":"CatalogCommitTimestamp","DataType":"datetime","Properties":{"Ordinal":6}},'
        '{"Column":"Created","DataType":"datetime","Properties":{"Ordinal":7}},'
        '{"Column":"ResultType","DataType":"string","Properties":{"Ordinal":8}},'
        '{"Column":"Url","DataType":"string","Properties":{"Ordinal":9}},'
        '{"Column":"Expression","DataType":"string","Properties":{"Ordinal":10}},'
        '{"Column":"File","DataType":"string","Properties":{"Ordinal":11}},'
        '{"Column":"GeneratedUrl","DataType":"string","Properties":{"Ordinal":12}},'
        '{"Column":"ExpressionParsed","DataType":"dynamic","Properties":{"Ordinal":13}},'
        '{"Column":"ExpressionLicenses","DataType":"dynamic","Properties":{"Ordinal":14}},'
        '{"Column":"ExpressionExceptions","DataType":"dynamic","Properties":{"Ordinal":15}},'
        '{"Column":"ExpressionNonStandardLicenses","DataType":"dynamic","Properties":{"Ordinal":16}},'
        '{"Column":"ExpressionHasDeprecatedIdentifier","DataType":"bool","Properties":{"Ordinal":17}},'
        '{"Column":"FileSize","DataType":"long","Properties":{"Ordinal":18}},'
        '{"Column":"FileSHA256","DataType":"string","Properties":{"Ordinal":19}},'
        '{"Column":"FileContent","DataType":"string","Properties":{"Ordinal":20}}'
    ']'

    */
    partial record PackageLicense
    {
        public int FieldCount => 21;

        public void WriteHeader(TextWriter writer)
        {
            writer.WriteLine("ScanId,ScanTimestamp,LowerId,Identity,Id,Version,CatalogCommitTimestamp,Created,ResultType,Url,Expression,File,GeneratedUrl,ExpressionParsed,ExpressionLicenses,ExpressionExceptions,ExpressionNonStandardLicenses,ExpressionHasDeprecatedIdentifier,FileSize,FileSHA256,FileContent");
        }

        public void Write(List<string> fields)
        {
            fields.Add(ScanId.ToString());
            fields.Add(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            fields.Add(LowerId);
            fields.Add(Identity);
            fields.Add(Id);
            fields.Add(Version);
            fields.Add(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            fields.Add(CsvUtility.FormatDateTimeOffset(Created));
            fields.Add(ResultType.ToString());
            fields.Add(Url);
            fields.Add(Expression);
            fields.Add(File);
            fields.Add(GeneratedUrl);
            fields.Add(ExpressionParsed);
            fields.Add(ExpressionLicenses);
            fields.Add(ExpressionExceptions);
            fields.Add(ExpressionNonStandardLicenses);
            fields.Add(CsvUtility.FormatBool(ExpressionHasDeprecatedIdentifier));
            fields.Add(FileSize.ToString());
            fields.Add(FileSHA256);
            fields.Add(FileContent);
        }

        public void Write(TextWriter writer)
        {
            writer.Write(ScanId);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, LowerId);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Identity);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(Created));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ResultType.ToString());
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Url);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Expression);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, File);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, GeneratedUrl);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ExpressionParsed);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ExpressionLicenses);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ExpressionExceptions);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ExpressionNonStandardLicenses);
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(ExpressionHasDeprecatedIdentifier));
            writer.Write(',');
            writer.Write(FileSize);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FileSHA256);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FileContent);
            writer.WriteLine();
        }

        public async Task WriteAsync(TextWriter writer)
        {
            await writer.WriteAsync(ScanId.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, LowerId);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Identity);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Id);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Version);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(Created));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, ResultType.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Url);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Expression);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, File);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, GeneratedUrl);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, ExpressionParsed);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, ExpressionLicenses);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, ExpressionExceptions);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, ExpressionNonStandardLicenses);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(ExpressionHasDeprecatedIdentifier));
            await writer.WriteAsync(',');
            await writer.WriteAsync(FileSize.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, FileSHA256);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, FileContent);
            await writer.WriteLineAsync();
        }

        public ICsvRecord ReadNew(Func<string> getNextField)
        {
            return new PackageLicense
            {
                ScanId = CsvUtility.ParseNullable(getNextField(), Guid.Parse),
                ScanTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                LowerId = getNextField(),
                Identity = getNextField(),
                Id = getNextField(),
                Version = getNextField(),
                CatalogCommitTimestamp = CsvUtility.ParseDateTimeOffset(getNextField()),
                Created = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                ResultType = Enum.Parse<PackageLicenseResultType>(getNextField()),
                Url = getNextField(),
                Expression = getNextField(),
                File = getNextField(),
                GeneratedUrl = getNextField(),
                ExpressionParsed = getNextField(),
                ExpressionLicenses = getNextField(),
                ExpressionExceptions = getNextField(),
                ExpressionNonStandardLicenses = getNextField(),
                ExpressionHasDeprecatedIdentifier = CsvUtility.ParseNullable(getNextField(), bool.Parse),
                FileSize = CsvUtility.ParseNullable(getNextField(), long.Parse),
                FileSHA256 = getNextField(),
                FileContent = getNextField(),
            };
        }

        public void SetEmptyStrings()
        {
            if (LowerId is null)
            {
                LowerId = string.Empty;
            }

            if (Identity is null)
            {
                Identity = string.Empty;
            }

            if (Id is null)
            {
                Id = string.Empty;
            }

            if (Version is null)
            {
                Version = string.Empty;
            }

            if (Url is null)
            {
                Url = string.Empty;
            }

            if (Expression is null)
            {
                Expression = string.Empty;
            }

            if (File is null)
            {
                File = string.Empty;
            }

            if (GeneratedUrl is null)
            {
                GeneratedUrl = string.Empty;
            }

            if (ExpressionParsed is null)
            {
                ExpressionParsed = string.Empty;
            }

            if (ExpressionLicenses is null)
            {
                ExpressionLicenses = string.Empty;
            }

            if (ExpressionExceptions is null)
            {
                ExpressionExceptions = string.Empty;
            }

            if (ExpressionNonStandardLicenses is null)
            {
                ExpressionNonStandardLicenses = string.Empty;
            }

            if (FileSHA256 is null)
            {
                FileSHA256 = string.Empty;
            }

            if (FileContent is null)
            {
                FileContent = string.Empty;
            }
        }
    }
}
