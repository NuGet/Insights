// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using MessagePack;
using MessagePack.Formatters;
using NuGet.Insights;

namespace NuGet.Insights.Worker.CatalogDataToCsv
{
    partial record CatalogLeafItemRecord
    {
        public class CatalogLeafItemRecordMessagePackFormatter : IMessagePackFormatter<CatalogLeafItemRecord>
        {
            public void Serialize(ref MessagePackWriter writer, CatalogLeafItemRecord value, MessagePackSerializerOptions options)
            {
                if (value is null)
                {
                    writer.WriteNil();
                    return;
                }

                writer.WriteArrayHeader(22);

                writer.Write(value.CommitId);
                MessagePackSerializer.Serialize(ref writer, value.CommitTimestamp, options);
                writer.Write(value.LowerId);
                writer.Write(value.Identity);
                writer.Write(value.Id);
                writer.Write(value.Version);
                writer.Write((int)value.Type);
                writer.Write(value.Url);
                writer.Write(value.PageUrl);
                MessagePackSerializer.Serialize(ref writer, value.Published, options);
                MessagePackSerializer.Serialize(ref writer, value.IsListed, options);
                MessagePackSerializer.Serialize(ref writer, value.Created, options);
                MessagePackSerializer.Serialize(ref writer, value.LastEdited, options);
                MessagePackSerializer.Serialize(ref writer, value.PackageSize, options);
                writer.Write(value.PackageHash);
                writer.Write(value.PackageHashAlgorithm);
                writer.Write(value.Deprecation);
                writer.Write(value.Vulnerabilities);
                MessagePackSerializer.Serialize(ref writer, value.HasRepositoryProperty, options);
                MessagePackSerializer.Serialize(ref writer, value.PackageEntryCount, options);
                writer.Write(value.NuspecPackageEntry);
                writer.Write(value.SignaturePackageEntry);
            }

            public CatalogLeafItemRecord Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
            {
                var count = reader.ReadArrayHeader();
                if (count != 22)
                {
                    throw new MessagePackSerializationException($"Invalid array length: {count}");
                }

                var record = new CatalogLeafItemRecord();

                record.CommitId = reader.ReadString();
                record.CommitTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset>(ref reader, options);
                record.LowerId = reader.ReadString();
                record.Identity = reader.ReadString();
                record.Id = reader.ReadString();
                record.Version = reader.ReadString();
                record.Type = (NuGet.Insights.CatalogLeafType)reader.ReadInt32();
                record.Url = reader.ReadString();
                record.PageUrl = reader.ReadString();
                record.Published = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.IsListed = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.Created = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.LastEdited = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.PackageSize = MessagePackSerializer.Deserialize<long?>(ref reader, options);
                record.PackageHash = reader.ReadString();
                record.PackageHashAlgorithm = reader.ReadString();
                record.Deprecation = reader.ReadString();
                record.Vulnerabilities = reader.ReadString();
                record.HasRepositoryProperty = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.PackageEntryCount = MessagePackSerializer.Deserialize<int?>(ref reader, options);
                record.NuspecPackageEntry = reader.ReadString();
                record.SignaturePackageEntry = reader.ReadString();

                return record;
            }
        }
    }
}