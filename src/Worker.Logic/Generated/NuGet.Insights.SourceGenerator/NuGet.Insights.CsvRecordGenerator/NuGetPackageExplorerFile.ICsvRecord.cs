// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using NuGet.Insights;

namespace NuGet.Insights.Worker.NuGetPackageExplorerToCsv
{
    /* Kusto DDL:

    .drop table NuGetPackageExplorerFiles ifexists;

    .create table NuGetPackageExplorerFiles (
        LowerId: string,
        Identity: string,
        Id: string,
        Version: string,
        CatalogCommitTimestamp: datetime,
        Created: datetime,
        ResultType: string,
        Path: string,
        Extension: string,
        HasCompilerFlags: bool,
        HasSourceLink: bool,
        HasDebugInfo: bool,
        CompilerFlags: dynamic,
        SourceUrlRepoInfo: dynamic,
        PdbType: string
    );

    .alter-merge table NuGetPackageExplorerFiles policy retention softdelete = 30d;

    .alter table NuGetPackageExplorerFiles policy partitioning '{'
      '"PartitionKeys": ['
        '{'
          '"ColumnName": "Identity",'
          '"Kind": "Hash",'
          '"Properties": {'
            '"Function": "XxHash64",'
            '"MaxPartitionCount": 256'
          '}'
        '}'
      ']'
    '}';

    .create table NuGetPackageExplorerFiles ingestion csv mapping 'BlobStorageMapping'
    '['
        '{"Column":"LowerId","DataType":"string","Properties":{"Ordinal":2}},'
        '{"Column":"Identity","DataType":"string","Properties":{"Ordinal":3}},'
        '{"Column":"Id","DataType":"string","Properties":{"Ordinal":4}},'
        '{"Column":"Version","DataType":"string","Properties":{"Ordinal":5}},'
        '{"Column":"CatalogCommitTimestamp","DataType":"datetime","Properties":{"Ordinal":6}},'
        '{"Column":"Created","DataType":"datetime","Properties":{"Ordinal":7}},'
        '{"Column":"ResultType","DataType":"string","Properties":{"Ordinal":8}},'
        '{"Column":"Path","DataType":"string","Properties":{"Ordinal":9}},'
        '{"Column":"Extension","DataType":"string","Properties":{"Ordinal":10}},'
        '{"Column":"HasCompilerFlags","DataType":"bool","Properties":{"Ordinal":11}},'
        '{"Column":"HasSourceLink","DataType":"bool","Properties":{"Ordinal":12}},'
        '{"Column":"HasDebugInfo","DataType":"bool","Properties":{"Ordinal":13}},'
        '{"Column":"CompilerFlags","DataType":"dynamic","Properties":{"Ordinal":14}},'
        '{"Column":"SourceUrlRepoInfo","DataType":"dynamic","Properties":{"Ordinal":15}},'
        '{"Column":"PdbType","DataType":"string","Properties":{"Ordinal":16}}'
    ']'

    */
    partial record NuGetPackageExplorerFile
    {
        public int FieldCount => 17;

        public void WriteHeader(TextWriter writer)
        {
            writer.WriteLine("ScanId,ScanTimestamp,LowerId,Identity,Id,Version,CatalogCommitTimestamp,Created,ResultType,Path,Extension,HasCompilerFlags,HasSourceLink,HasDebugInfo,CompilerFlags,SourceUrlRepoInfo,PdbType");
        }

        public void Write(List<string> fields)
        {
            fields.Add(ScanId.ToString());
            fields.Add(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            fields.Add(LowerId);
            fields.Add(Identity);
            fields.Add(Id);
            fields.Add(Version);
            fields.Add(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            fields.Add(CsvUtility.FormatDateTimeOffset(Created));
            fields.Add(ResultType.ToString());
            fields.Add(Path);
            fields.Add(Extension);
            fields.Add(CsvUtility.FormatBool(HasCompilerFlags));
            fields.Add(CsvUtility.FormatBool(HasSourceLink));
            fields.Add(CsvUtility.FormatBool(HasDebugInfo));
            fields.Add(CompilerFlags);
            fields.Add(SourceUrlRepoInfo);
            fields.Add(PdbType.ToString());
        }

        public void Write(TextWriter writer)
        {
            writer.Write(ScanId);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, LowerId);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Identity);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(Created));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ResultType.ToString());
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Path);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Extension);
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(HasCompilerFlags));
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(HasSourceLink));
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(HasDebugInfo));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, CompilerFlags);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, SourceUrlRepoInfo);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PdbType.ToString());
            writer.WriteLine();
        }

        public async Task WriteAsync(TextWriter writer)
        {
            await writer.WriteAsync(ScanId.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, LowerId);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Identity);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Id);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Version);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(Created));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, ResultType.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Path);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Extension);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(HasCompilerFlags));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(HasSourceLink));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(HasDebugInfo));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, CompilerFlags);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, SourceUrlRepoInfo);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, PdbType.ToString());
            await writer.WriteLineAsync();
        }

        public ICsvRecord ReadNew(Func<string> getNextField)
        {
            return new NuGetPackageExplorerFile
            {
                ScanId = CsvUtility.ParseNullable(getNextField(), Guid.Parse),
                ScanTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                LowerId = getNextField(),
                Identity = getNextField(),
                Id = getNextField(),
                Version = getNextField(),
                CatalogCommitTimestamp = CsvUtility.ParseDateTimeOffset(getNextField()),
                Created = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                ResultType = Enum.Parse<NuGetPackageExplorerResultType>(getNextField()),
                Path = getNextField(),
                Extension = getNextField(),
                HasCompilerFlags = CsvUtility.ParseNullable(getNextField(), bool.Parse),
                HasSourceLink = CsvUtility.ParseNullable(getNextField(), bool.Parse),
                HasDebugInfo = CsvUtility.ParseNullable(getNextField(), bool.Parse),
                CompilerFlags = getNextField(),
                SourceUrlRepoInfo = getNextField(),
                PdbType = CsvUtility.ParseNullable(getNextField(), Enum.Parse<NuGetPe.AssemblyMetadata.PdbType>),
            };
        }
    }
}
