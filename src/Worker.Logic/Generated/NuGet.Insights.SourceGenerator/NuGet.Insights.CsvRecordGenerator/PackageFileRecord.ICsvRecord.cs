// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageFileToCsv
{
    /* Kusto DDL:

    .drop table PackageFiles ifexists;

    .create table PackageFiles (
        LowerId: string,
        Identity: string,
        Id: string,
        Version: string,
        CatalogCommitTimestamp: datetime,
        Created: datetime,
        ResultType: string,
        SequenceNumber: int,
        Path: string,
        FileName: string,
        FileExtension: string,
        TopLevelFolder: string,
        CompressedLength: long,
        EntryUncompressedLength: long,
        ActualUncompressedLength: long,
        MD5: string,
        SHA1: string,
        SHA256: string,
        SHA512: string,
        First64: string
    ) with (docstring = "See https://github.com/NuGet/Insights/blob/main/docs/tables/PackageFiles.md", folder = "");

    .alter-merge table PackageFiles policy retention softdelete = 30d;

    .alter table PackageFiles policy partitioning '{'
      '"PartitionKeys": ['
        '{'
          '"ColumnName": "Identity",'
          '"Kind": "Hash",'
          '"Properties": {'
            '"Function": "XxHash64",'
            '"MaxPartitionCount": 256'
          '}'
        '}'
      ']'
    '}';

    .create table PackageFiles ingestion csv mapping 'BlobStorageMapping'
    '['
        '{"Column":"LowerId","DataType":"string","Properties":{"Ordinal":2}},'
        '{"Column":"Identity","DataType":"string","Properties":{"Ordinal":3}},'
        '{"Column":"Id","DataType":"string","Properties":{"Ordinal":4}},'
        '{"Column":"Version","DataType":"string","Properties":{"Ordinal":5}},'
        '{"Column":"CatalogCommitTimestamp","DataType":"datetime","Properties":{"Ordinal":6}},'
        '{"Column":"Created","DataType":"datetime","Properties":{"Ordinal":7}},'
        '{"Column":"ResultType","DataType":"string","Properties":{"Ordinal":8}},'
        '{"Column":"SequenceNumber","DataType":"int","Properties":{"Ordinal":9}},'
        '{"Column":"Path","DataType":"string","Properties":{"Ordinal":10}},'
        '{"Column":"FileName","DataType":"string","Properties":{"Ordinal":11}},'
        '{"Column":"FileExtension","DataType":"string","Properties":{"Ordinal":12}},'
        '{"Column":"TopLevelFolder","DataType":"string","Properties":{"Ordinal":13}},'
        '{"Column":"CompressedLength","DataType":"long","Properties":{"Ordinal":14}},'
        '{"Column":"EntryUncompressedLength","DataType":"long","Properties":{"Ordinal":15}},'
        '{"Column":"ActualUncompressedLength","DataType":"long","Properties":{"Ordinal":16}},'
        '{"Column":"MD5","DataType":"string","Properties":{"Ordinal":17}},'
        '{"Column":"SHA1","DataType":"string","Properties":{"Ordinal":18}},'
        '{"Column":"SHA256","DataType":"string","Properties":{"Ordinal":19}},'
        '{"Column":"SHA512","DataType":"string","Properties":{"Ordinal":20}},'
        '{"Column":"First64","DataType":"string","Properties":{"Ordinal":21}}'
    ']'

    */
    partial record PackageFileRecord
    {
        public int FieldCount => 22;

        public void WriteHeader(TextWriter writer)
        {
            writer.WriteLine("ScanId,ScanTimestamp,LowerId,Identity,Id,Version,CatalogCommitTimestamp,Created,ResultType,SequenceNumber,Path,FileName,FileExtension,TopLevelFolder,CompressedLength,EntryUncompressedLength,ActualUncompressedLength,MD5,SHA1,SHA256,SHA512,First64");
        }

        public void Write(List<string> fields)
        {
            fields.Add(ScanId.ToString());
            fields.Add(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            fields.Add(LowerId);
            fields.Add(Identity);
            fields.Add(Id);
            fields.Add(Version);
            fields.Add(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            fields.Add(CsvUtility.FormatDateTimeOffset(Created));
            fields.Add(ResultType.ToString());
            fields.Add(SequenceNumber.ToString());
            fields.Add(Path);
            fields.Add(FileName);
            fields.Add(FileExtension);
            fields.Add(TopLevelFolder);
            fields.Add(CompressedLength.ToString());
            fields.Add(EntryUncompressedLength.ToString());
            fields.Add(ActualUncompressedLength.ToString());
            fields.Add(MD5);
            fields.Add(SHA1);
            fields.Add(SHA256);
            fields.Add(SHA512);
            fields.Add(First64);
        }

        public void Write(TextWriter writer)
        {
            writer.Write(ScanId);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, LowerId);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Identity);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(Created));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ResultType.ToString());
            writer.Write(',');
            writer.Write(SequenceNumber);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Path);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FileName);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FileExtension);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, TopLevelFolder);
            writer.Write(',');
            writer.Write(CompressedLength);
            writer.Write(',');
            writer.Write(EntryUncompressedLength);
            writer.Write(',');
            writer.Write(ActualUncompressedLength);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, MD5);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, SHA1);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, SHA256);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, SHA512);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, First64);
            writer.WriteLine();
        }

        public async Task WriteAsync(TextWriter writer)
        {
            await writer.WriteAsync(ScanId.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, LowerId);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Identity);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Id);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Version);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(Created));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, ResultType.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(SequenceNumber.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Path);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, FileName);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, FileExtension);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, TopLevelFolder);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CompressedLength.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(EntryUncompressedLength.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(ActualUncompressedLength.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, MD5);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, SHA1);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, SHA256);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, SHA512);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, First64);
            await writer.WriteLineAsync();
        }

        public ICsvRecord ReadNew(Func<string> getNextField)
        {
            return new PackageFileRecord
            {
                ScanId = CsvUtility.ParseNullable(getNextField(), Guid.Parse),
                ScanTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                LowerId = getNextField(),
                Identity = getNextField(),
                Id = getNextField(),
                Version = getNextField(),
                CatalogCommitTimestamp = CsvUtility.ParseDateTimeOffset(getNextField()),
                Created = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                ResultType = Enum.Parse<NuGet.Insights.Worker.FileRecordResultType>(getNextField()),
                SequenceNumber = CsvUtility.ParseNullable(getNextField(), int.Parse),
                Path = getNextField(),
                FileName = getNextField(),
                FileExtension = getNextField(),
                TopLevelFolder = getNextField(),
                CompressedLength = CsvUtility.ParseNullable(getNextField(), long.Parse),
                EntryUncompressedLength = CsvUtility.ParseNullable(getNextField(), long.Parse),
                ActualUncompressedLength = CsvUtility.ParseNullable(getNextField(), long.Parse),
                MD5 = getNextField(),
                SHA1 = getNextField(),
                SHA256 = getNextField(),
                SHA512 = getNextField(),
                First64 = getNextField(),
            };
        }

        public void SetEmptyStrings()
        {
            if (LowerId is null)
            {
                LowerId = string.Empty;
            }

            if (Identity is null)
            {
                Identity = string.Empty;
            }

            if (Id is null)
            {
                Id = string.Empty;
            }

            if (Version is null)
            {
                Version = string.Empty;
            }

            if (Path is null)
            {
                Path = string.Empty;
            }

            if (FileName is null)
            {
                FileName = string.Empty;
            }

            if (FileExtension is null)
            {
                FileExtension = string.Empty;
            }

            if (TopLevelFolder is null)
            {
                TopLevelFolder = string.Empty;
            }

            if (MD5 is null)
            {
                MD5 = string.Empty;
            }

            if (SHA1 is null)
            {
                SHA1 = string.Empty;
            }

            if (SHA256 is null)
            {
                SHA256 = string.Empty;
            }

            if (SHA512 is null)
            {
                SHA512 = string.Empty;
            }

            if (First64 is null)
            {
                First64 = string.Empty;
            }
        }
    }
}
