// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using MessagePack;
using MessagePack.Formatters;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageSignatureToCsv
{
    partial record PackageSignature
    {
        public class PackageSignatureMessagePackFormatter : IMessagePackFormatter<PackageSignature>
        {
            public void Serialize(ref MessagePackWriter writer, PackageSignature value, MessagePackSerializerOptions options)
            {
                if (value is null)
                {
                    writer.WriteNil();
                    return;
                }

                writer.WriteArrayHeader(40);

                MessagePackSerializer.Serialize(ref writer, value.ScanId, options);
                MessagePackSerializer.Serialize(ref writer, value.ScanTimestamp, options);
                writer.Write(value.LowerId);
                writer.Write(value.Identity);
                writer.Write(value.Id);
                writer.Write(value.Version);
                MessagePackSerializer.Serialize(ref writer, value.CatalogCommitTimestamp, options);
                MessagePackSerializer.Serialize(ref writer, value.Created, options);
                writer.Write((int)value.ResultType);
                MessagePackSerializer.Serialize(ref writer, value.HashAlgorithm, options);
                writer.Write(value.HashValue);
                writer.Write(value.AuthorSHA1);
                writer.Write(value.AuthorSHA256);
                writer.Write(value.AuthorSubject);
                MessagePackSerializer.Serialize(ref writer, value.AuthorNotBefore, options);
                MessagePackSerializer.Serialize(ref writer, value.AuthorNotAfter, options);
                writer.Write(value.AuthorIssuer);
                writer.Write(value.AuthorTimestampSHA1);
                writer.Write(value.AuthorTimestampSHA256);
                writer.Write(value.AuthorTimestampSubject);
                MessagePackSerializer.Serialize(ref writer, value.AuthorTimestampNotBefore, options);
                MessagePackSerializer.Serialize(ref writer, value.AuthorTimestampNotAfter, options);
                writer.Write(value.AuthorTimestampIssuer);
                MessagePackSerializer.Serialize(ref writer, value.AuthorTimestampValue, options);
                MessagePackSerializer.Serialize(ref writer, value.AuthorTimestampHasASN1Error, options);
                writer.Write(value.RepositorySHA1);
                writer.Write(value.RepositorySHA256);
                writer.Write(value.RepositorySubject);
                MessagePackSerializer.Serialize(ref writer, value.RepositoryNotBefore, options);
                MessagePackSerializer.Serialize(ref writer, value.RepositoryNotAfter, options);
                writer.Write(value.RepositoryIssuer);
                writer.Write(value.RepositoryTimestampSHA1);
                writer.Write(value.RepositoryTimestampSHA256);
                writer.Write(value.RepositoryTimestampSubject);
                MessagePackSerializer.Serialize(ref writer, value.RepositoryTimestampNotBefore, options);
                MessagePackSerializer.Serialize(ref writer, value.RepositoryTimestampNotAfter, options);
                writer.Write(value.RepositoryTimestampIssuer);
                MessagePackSerializer.Serialize(ref writer, value.RepositoryTimestampValue, options);
                MessagePackSerializer.Serialize(ref writer, value.RepositoryTimestampHasASN1Error, options);
                writer.Write(value.PackageOwners);
            }

            public PackageSignature Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
            {
                var count = reader.ReadArrayHeader();
                if (count != 40)
                {
                    throw new MessagePackSerializationException($"Invalid array length: {count}");
                }

                var record = new PackageSignature();

                record.ScanId = MessagePackSerializer.Deserialize<System.Guid?>(ref reader, options);
                record.ScanTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.LowerId = reader.ReadString();
                record.Identity = reader.ReadString();
                record.Id = reader.ReadString();
                record.Version = reader.ReadString();
                record.CatalogCommitTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset>(ref reader, options);
                record.Created = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.ResultType = (NuGet.Insights.Worker.PackageSignatureToCsv.PackageSignatureResultType)reader.ReadInt32();
                record.HashAlgorithm = MessagePackSerializer.Deserialize<NuGet.Common.HashAlgorithmName?>(ref reader, options);
                record.HashValue = reader.ReadString();
                record.AuthorSHA1 = reader.ReadString();
                record.AuthorSHA256 = reader.ReadString();
                record.AuthorSubject = reader.ReadString();
                record.AuthorNotBefore = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.AuthorNotAfter = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.AuthorIssuer = reader.ReadString();
                record.AuthorTimestampSHA1 = reader.ReadString();
                record.AuthorTimestampSHA256 = reader.ReadString();
                record.AuthorTimestampSubject = reader.ReadString();
                record.AuthorTimestampNotBefore = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.AuthorTimestampNotAfter = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.AuthorTimestampIssuer = reader.ReadString();
                record.AuthorTimestampValue = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.AuthorTimestampHasASN1Error = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.RepositorySHA1 = reader.ReadString();
                record.RepositorySHA256 = reader.ReadString();
                record.RepositorySubject = reader.ReadString();
                record.RepositoryNotBefore = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.RepositoryNotAfter = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.RepositoryIssuer = reader.ReadString();
                record.RepositoryTimestampSHA1 = reader.ReadString();
                record.RepositoryTimestampSHA256 = reader.ReadString();
                record.RepositoryTimestampSubject = reader.ReadString();
                record.RepositoryTimestampNotBefore = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.RepositoryTimestampNotAfter = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.RepositoryTimestampIssuer = reader.ReadString();
                record.RepositoryTimestampValue = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.RepositoryTimestampHasASN1Error = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.PackageOwners = reader.ReadString();

                return record;
            }
        }
    }
}