// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using MessagePack;
using MessagePack.Formatters;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageVersionToCsv
{
    partial record PackageVersionRecord
    {
        public class PackageVersionRecordMessagePackFormatter : IMessagePackFormatter<PackageVersionRecord>
        {
            public void Serialize(ref MessagePackWriter writer, PackageVersionRecord value, MessagePackSerializerOptions options)
            {
                if (value is null)
                {
                    writer.WriteNil();
                    return;
                }

                writer.WriteArrayHeader(29);

                MessagePackSerializer.Serialize(ref writer, value.ScanId, options);
                MessagePackSerializer.Serialize(ref writer, value.ScanTimestamp, options);
                writer.Write(value.LowerId);
                writer.Write(value.Identity);
                writer.Write(value.Id);
                writer.Write(value.Version);
                MessagePackSerializer.Serialize(ref writer, value.CatalogCommitTimestamp, options);
                MessagePackSerializer.Serialize(ref writer, value.Created, options);
                writer.Write((int)value.ResultType);
                writer.Write(value.OriginalVersion);
                writer.Write(value.FullVersion);
                writer.Write(value.Major);
                writer.Write(value.Minor);
                writer.Write(value.Patch);
                writer.Write(value.Revision);
                writer.Write(value.Release);
                writer.Write(value.ReleaseLabels);
                writer.Write(value.Metadata);
                writer.Write(value.IsPrerelease);
                MessagePackSerializer.Serialize(ref writer, value.IsListed, options);
                MessagePackSerializer.Serialize(ref writer, value.IsSemVer2, options);
                MessagePackSerializer.Serialize(ref writer, value.SemVerType, options);
                writer.Write(value.SemVerOrder);
                writer.Write(value.IsLatest);
                writer.Write(value.IsLatestStable);
                writer.Write(value.IsLatestSemVer2);
                writer.Write(value.IsLatestStableSemVer2);
                MessagePackSerializer.Serialize(ref writer, value.Published, options);
                MessagePackSerializer.Serialize(ref writer, value.LastEdited, options);
            }

            public PackageVersionRecord Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
            {
                var count = reader.ReadArrayHeader();
                if (count != 29)
                {
                    throw new MessagePackSerializationException($"Invalid array length: {count}");
                }

                var record = new PackageVersionRecord();

                record.ScanId = MessagePackSerializer.Deserialize<System.Guid?>(ref reader, options);
                record.ScanTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.LowerId = reader.ReadString();
                record.Identity = reader.ReadString();
                record.Id = reader.ReadString();
                record.Version = reader.ReadString();
                record.CatalogCommitTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset>(ref reader, options);
                record.Created = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.ResultType = (NuGet.Insights.Worker.PackageVersionToCsv.PackageVersionResultType)reader.ReadInt32();
                record.OriginalVersion = reader.ReadString();
                record.FullVersion = reader.ReadString();
                record.Major = reader.ReadInt32();
                record.Minor = reader.ReadInt32();
                record.Patch = reader.ReadInt32();
                record.Revision = reader.ReadInt32();
                record.Release = reader.ReadString();
                record.ReleaseLabels = reader.ReadString();
                record.Metadata = reader.ReadString();
                record.IsPrerelease = reader.ReadBoolean();
                record.IsListed = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.IsSemVer2 = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.SemVerType = MessagePackSerializer.Deserialize<NuGet.Insights.SemVerType?>(ref reader, options);
                record.SemVerOrder = reader.ReadInt32();
                record.IsLatest = reader.ReadBoolean();
                record.IsLatestStable = reader.ReadBoolean();
                record.IsLatestSemVer2 = reader.ReadBoolean();
                record.IsLatestStableSemVer2 = reader.ReadBoolean();
                record.Published = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.LastEdited = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);

                return record;
            }
        }
    }
}