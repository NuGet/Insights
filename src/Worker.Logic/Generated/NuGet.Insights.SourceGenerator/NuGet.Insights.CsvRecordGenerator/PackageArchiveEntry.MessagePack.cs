// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using MessagePack;
using MessagePack.Formatters;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageArchiveToCsv
{
    partial record PackageArchiveEntry
    {
        public class PackageArchiveEntryMessagePackFormatter : IMessagePackFormatter<PackageArchiveEntry>
        {
            public void Serialize(ref MessagePackWriter writer, PackageArchiveEntry value, MessagePackSerializerOptions options)
            {
                if (value is null)
                {
                    writer.WriteNil();
                    return;
                }

                writer.WriteArrayHeader(22);

                MessagePackSerializer.Serialize(ref writer, value.ScanId, options);
                MessagePackSerializer.Serialize(ref writer, value.ScanTimestamp, options);
                writer.Write(value.LowerId);
                writer.Write(value.Identity);
                writer.Write(value.Id);
                writer.Write(value.Version);
                MessagePackSerializer.Serialize(ref writer, value.CatalogCommitTimestamp, options);
                MessagePackSerializer.Serialize(ref writer, value.Created, options);
                writer.Write((int)value.ResultType);
                MessagePackSerializer.Serialize(ref writer, value.SequenceNumber, options);
                writer.Write(value.Path);
                writer.Write(value.FileName);
                writer.Write(value.FileExtension);
                writer.Write(value.TopLevelFolder);
                MessagePackSerializer.Serialize(ref writer, value.Flags, options);
                MessagePackSerializer.Serialize(ref writer, value.CompressionMethod, options);
                MessagePackSerializer.Serialize(ref writer, value.LastModified, options);
                MessagePackSerializer.Serialize(ref writer, value.Crc32, options);
                MessagePackSerializer.Serialize(ref writer, value.CompressedSize, options);
                MessagePackSerializer.Serialize(ref writer, value.UncompressedSize, options);
                MessagePackSerializer.Serialize(ref writer, value.LocalHeaderOffset, options);
                writer.Write(value.Comment);
            }

            public PackageArchiveEntry Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
            {
                var count = reader.ReadArrayHeader();
                if (count != 22)
                {
                    throw new MessagePackSerializationException($"Invalid array length: {count}");
                }

                var record = new PackageArchiveEntry();

                record.ScanId = MessagePackSerializer.Deserialize<System.Guid?>(ref reader, options);
                record.ScanTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.LowerId = reader.ReadString();
                record.Identity = reader.ReadString();
                record.Id = reader.ReadString();
                record.Version = reader.ReadString();
                record.CatalogCommitTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset>(ref reader, options);
                record.Created = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.ResultType = (NuGet.Insights.Worker.ArchiveResultType)reader.ReadInt32();
                record.SequenceNumber = MessagePackSerializer.Deserialize<int?>(ref reader, options);
                record.Path = reader.ReadString();
                record.FileName = reader.ReadString();
                record.FileExtension = reader.ReadString();
                record.TopLevelFolder = reader.ReadString();
                record.Flags = MessagePackSerializer.Deserialize<ushort?>(ref reader, options);
                record.CompressionMethod = MessagePackSerializer.Deserialize<ushort?>(ref reader, options);
                record.LastModified = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.Crc32 = MessagePackSerializer.Deserialize<uint?>(ref reader, options);
                record.CompressedSize = MessagePackSerializer.Deserialize<uint?>(ref reader, options);
                record.UncompressedSize = MessagePackSerializer.Deserialize<uint?>(ref reader, options);
                record.LocalHeaderOffset = MessagePackSerializer.Deserialize<uint?>(ref reader, options);
                record.Comment = reader.ReadString();

                return record;
            }
        }
    }
}