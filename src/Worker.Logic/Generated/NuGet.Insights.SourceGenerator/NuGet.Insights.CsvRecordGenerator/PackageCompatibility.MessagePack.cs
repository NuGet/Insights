// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using MessagePack;
using MessagePack.Formatters;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageCompatibilityToCsv
{
    partial record PackageCompatibility
    {
        public class PackageCompatibilityMessagePackFormatter : IMessagePackFormatter<PackageCompatibility>
        {
            public void Serialize(ref MessagePackWriter writer, PackageCompatibility value, MessagePackSerializerOptions options)
            {
                if (value is null)
                {
                    writer.WriteNil();
                    return;
                }

                writer.WriteArrayHeader(21);

                MessagePackSerializer.Serialize(ref writer, value.ScanId, options);
                MessagePackSerializer.Serialize(ref writer, value.ScanTimestamp, options);
                writer.Write(value.LowerId);
                writer.Write(value.Identity);
                writer.Write(value.Id);
                writer.Write(value.Version);
                MessagePackSerializer.Serialize(ref writer, value.CatalogCommitTimestamp, options);
                MessagePackSerializer.Serialize(ref writer, value.Created, options);
                writer.Write((int)value.ResultType);
                MessagePackSerializer.Serialize(ref writer, value.HasError, options);
                MessagePackSerializer.Serialize(ref writer, value.DoesNotRoundTrip, options);
                MessagePackSerializer.Serialize(ref writer, value.HasAny, options);
                MessagePackSerializer.Serialize(ref writer, value.HasUnsupported, options);
                MessagePackSerializer.Serialize(ref writer, value.HasAgnostic, options);
                writer.Write(value.BrokenFrameworks);
                writer.Write(value.NuspecReader);
                writer.Write(value.NU1202);
                writer.Write(value.NuGetGallery);
                writer.Write(value.NuGetGalleryEscaped);
                writer.Write(value.NuGetGallerySupported);
                writer.Write(value.NuGetGalleryBadges);
            }

            public PackageCompatibility Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
            {
                var count = reader.ReadArrayHeader();
                if (count != 21)
                {
                    throw new MessagePackSerializationException($"Invalid array length: {count}");
                }

                var record = new PackageCompatibility();

                record.ScanId = MessagePackSerializer.Deserialize<System.Guid?>(ref reader, options);
                record.ScanTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.LowerId = reader.ReadString();
                record.Identity = reader.ReadString();
                record.Id = reader.ReadString();
                record.Version = reader.ReadString();
                record.CatalogCommitTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset>(ref reader, options);
                record.Created = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.ResultType = (NuGet.Insights.Worker.PackageCompatibilityToCsv.PackageCompatibilityResultType)reader.ReadInt32();
                record.HasError = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.DoesNotRoundTrip = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.HasAny = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.HasUnsupported = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.HasAgnostic = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.BrokenFrameworks = reader.ReadString();
                record.NuspecReader = reader.ReadString();
                record.NU1202 = reader.ReadString();
                record.NuGetGallery = reader.ReadString();
                record.NuGetGalleryEscaped = reader.ReadString();
                record.NuGetGallerySupported = reader.ReadString();
                record.NuGetGalleryBadges = reader.ReadString();

                return record;
            }
        }
    }
}