// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Collections.Generic;

namespace NuGet.Insights
{
    static partial class KustoDDL
    {
        public const string PackageAssemblyDefaultTableName = "PackageAssemblies";

        public static readonly IReadOnlyList<string> PackageAssemblyDDL = new[]
        {
            ".drop table __TABLENAME__ ifexists",

            @".create table __TABLENAME__ (
    LowerId: string,
    Identity: string,
    Id: string,
    Version: string,
    CatalogCommitTimestamp: datetime,
    Created: datetime,
    ResultType: string,
    Path: string,
    FileName: string,
    FileExtension: string,
    TopLevelFolder: string,
    CompressedLength: long,
    EntryUncompressedLength: long,
    ActualUncompressedLength: long,
    FileSHA256: string,
    HasException: bool,
    AssemblyName: string,
    AssemblyVersion: string,
    Culture: string,
    AssemblyNameHasCultureNotFoundException: bool,
    AssemblyNameHasFileLoadException: bool,
    PublicKeyToken: string,
    PublicKeyTokenHasSecurityException: bool,
    HashAlgorithm: string,
    HasPublicKey: bool,
    PublicKeyLength: int,
    PublicKeySHA1: string,
    CustomAttributes: dynamic,
    CustomAttributesFailedDecode: dynamic,
    CustomAttributesAreTruncated: bool,
    CustomAttributesHaveMethodDefinitions: bool,
    CustomAttributesHaveTypeDefinitionConstructors: bool,
    CustomAttributesHaveDuplicateArgumentNames: bool,
    CustomAttributesTotalCount: int,
    CustomAttributesTotalDataLength: int,
    CustomAttributesHasException: bool
)",

            ".alter-merge table __TABLENAME__ policy retention softdelete = 30d",

            @".create table __TABLENAME__ ingestion csv mapping 'BlobStorageMapping'
'['
    '{""Column"":""LowerId"",""DataType"":""string"",""Properties"":{""Ordinal"":2}},'
    '{""Column"":""Identity"",""DataType"":""string"",""Properties"":{""Ordinal"":3}},'
    '{""Column"":""Id"",""DataType"":""string"",""Properties"":{""Ordinal"":4}},'
    '{""Column"":""Version"",""DataType"":""string"",""Properties"":{""Ordinal"":5}},'
    '{""Column"":""CatalogCommitTimestamp"",""DataType"":""datetime"",""Properties"":{""Ordinal"":6}},'
    '{""Column"":""Created"",""DataType"":""datetime"",""Properties"":{""Ordinal"":7}},'
    '{""Column"":""ResultType"",""DataType"":""string"",""Properties"":{""Ordinal"":8}},'
    '{""Column"":""Path"",""DataType"":""string"",""Properties"":{""Ordinal"":9}},'
    '{""Column"":""FileName"",""DataType"":""string"",""Properties"":{""Ordinal"":10}},'
    '{""Column"":""FileExtension"",""DataType"":""string"",""Properties"":{""Ordinal"":11}},'
    '{""Column"":""TopLevelFolder"",""DataType"":""string"",""Properties"":{""Ordinal"":12}},'
    '{""Column"":""CompressedLength"",""DataType"":""long"",""Properties"":{""Ordinal"":13}},'
    '{""Column"":""EntryUncompressedLength"",""DataType"":""long"",""Properties"":{""Ordinal"":14}},'
    '{""Column"":""ActualUncompressedLength"",""DataType"":""long"",""Properties"":{""Ordinal"":15}},'
    '{""Column"":""FileSHA256"",""DataType"":""string"",""Properties"":{""Ordinal"":16}},'
    '{""Column"":""HasException"",""DataType"":""bool"",""Properties"":{""Ordinal"":17}},'
    '{""Column"":""AssemblyName"",""DataType"":""string"",""Properties"":{""Ordinal"":18}},'
    '{""Column"":""AssemblyVersion"",""DataType"":""string"",""Properties"":{""Ordinal"":19}},'
    '{""Column"":""Culture"",""DataType"":""string"",""Properties"":{""Ordinal"":20}},'
    '{""Column"":""AssemblyNameHasCultureNotFoundException"",""DataType"":""bool"",""Properties"":{""Ordinal"":21}},'
    '{""Column"":""AssemblyNameHasFileLoadException"",""DataType"":""bool"",""Properties"":{""Ordinal"":22}},'
    '{""Column"":""PublicKeyToken"",""DataType"":""string"",""Properties"":{""Ordinal"":23}},'
    '{""Column"":""PublicKeyTokenHasSecurityException"",""DataType"":""bool"",""Properties"":{""Ordinal"":24}},'
    '{""Column"":""HashAlgorithm"",""DataType"":""string"",""Properties"":{""Ordinal"":25}},'
    '{""Column"":""HasPublicKey"",""DataType"":""bool"",""Properties"":{""Ordinal"":26}},'
    '{""Column"":""PublicKeyLength"",""DataType"":""int"",""Properties"":{""Ordinal"":27}},'
    '{""Column"":""PublicKeySHA1"",""DataType"":""string"",""Properties"":{""Ordinal"":28}},'
    '{""Column"":""CustomAttributes"",""DataType"":""dynamic"",""Properties"":{""Ordinal"":29}},'
    '{""Column"":""CustomAttributesFailedDecode"",""DataType"":""dynamic"",""Properties"":{""Ordinal"":30}},'
    '{""Column"":""CustomAttributesAreTruncated"",""DataType"":""bool"",""Properties"":{""Ordinal"":31}},'
    '{""Column"":""CustomAttributesHaveMethodDefinitions"",""DataType"":""bool"",""Properties"":{""Ordinal"":32}},'
    '{""Column"":""CustomAttributesHaveTypeDefinitionConstructors"",""DataType"":""bool"",""Properties"":{""Ordinal"":33}},'
    '{""Column"":""CustomAttributesHaveDuplicateArgumentNames"",""DataType"":""bool"",""Properties"":{""Ordinal"":34}},'
    '{""Column"":""CustomAttributesTotalCount"",""DataType"":""int"",""Properties"":{""Ordinal"":35}},'
    '{""Column"":""CustomAttributesTotalDataLength"",""DataType"":""int"",""Properties"":{""Ordinal"":36}},'
    '{""Column"":""CustomAttributesHasException"",""DataType"":""bool"",""Properties"":{""Ordinal"":37}}'
']'",
        };

        public const string PackageAssemblyPartitioningPolicy = @".alter table __TABLENAME__ policy partitioning '{'
  '""PartitionKeys"": ['
    '{'
      '""ColumnName"": ""Identity"",'
      '""Kind"": ""Hash"",'
      '""Properties"": {'
        '""Function"": ""XxHash64"",'
        '""MaxPartitionCount"": 256'
      '}'
    '}'
  ']'
'}'";

        private static readonly bool PackageAssemblyAddTypeToDefaultTableName = AddTypeToDefaultTableName(typeof(NuGet.Insights.Worker.PackageAssemblyToCsv.PackageAssembly), PackageAssemblyDefaultTableName);

        private static readonly bool PackageAssemblyAddTypeToDDL = AddTypeToDDL(typeof(NuGet.Insights.Worker.PackageAssemblyToCsv.PackageAssembly), PackageAssemblyDDL);

        private static readonly bool PackageAssemblyAddTypeToPartitioningPolicy = AddTypeToPartitioningPolicy(typeof(NuGet.Insights.Worker.PackageAssemblyToCsv.PackageAssembly), PackageAssemblyPartitioningPolicy);
    }
}
