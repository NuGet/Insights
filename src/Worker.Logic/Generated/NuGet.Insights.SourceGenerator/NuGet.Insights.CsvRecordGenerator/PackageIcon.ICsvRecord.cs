// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageIconToCsv
{
    /* Kusto DDL:

    .drop table PackageIcons ifexists;

    .create table PackageIcons (
        LowerId: string,
        Identity: string,
        Id: string,
        Version: string,
        CatalogCommitTimestamp: datetime,
        Created: datetime,
        ResultType: string,
        FileSize: long,
        MD5: string,
        SHA1: string,
        SHA256: string,
        SHA512: string,
        ContentType: string,
        Format: string,
        Width: int,
        Height: int,
        FrameCountByTime: int,
        FrameCountByResolution: int,
        FrameCountByPage: int,
        HorizontalResolution: real,
        VerticalResolution: real,
        Flags: int,
        PixelFormat: string,
        PropertyItems: dynamic
    );

    .alter-merge table PackageIcons policy retention softdelete = 30d;

    .alter table PackageIcons policy partitioning '{'
      '"PartitionKeys": ['
        '{'
          '"ColumnName": "Identity",'
          '"Kind": "Hash",'
          '"Properties": {'
            '"Function": "XxHash64",'
            '"MaxPartitionCount": 256'
          '}'
        '}'
      ']'
    '}';

    .create table PackageIcons ingestion csv mapping 'BlobStorageMapping'
    '['
        '{"Column":"LowerId","DataType":"string","Properties":{"Ordinal":2}},'
        '{"Column":"Identity","DataType":"string","Properties":{"Ordinal":3}},'
        '{"Column":"Id","DataType":"string","Properties":{"Ordinal":4}},'
        '{"Column":"Version","DataType":"string","Properties":{"Ordinal":5}},'
        '{"Column":"CatalogCommitTimestamp","DataType":"datetime","Properties":{"Ordinal":6}},'
        '{"Column":"Created","DataType":"datetime","Properties":{"Ordinal":7}},'
        '{"Column":"ResultType","DataType":"string","Properties":{"Ordinal":8}},'
        '{"Column":"FileSize","DataType":"long","Properties":{"Ordinal":9}},'
        '{"Column":"MD5","DataType":"string","Properties":{"Ordinal":10}},'
        '{"Column":"SHA1","DataType":"string","Properties":{"Ordinal":11}},'
        '{"Column":"SHA256","DataType":"string","Properties":{"Ordinal":12}},'
        '{"Column":"SHA512","DataType":"string","Properties":{"Ordinal":13}},'
        '{"Column":"ContentType","DataType":"string","Properties":{"Ordinal":14}},'
        '{"Column":"Format","DataType":"string","Properties":{"Ordinal":15}},'
        '{"Column":"Width","DataType":"int","Properties":{"Ordinal":16}},'
        '{"Column":"Height","DataType":"int","Properties":{"Ordinal":17}},'
        '{"Column":"FrameCountByTime","DataType":"int","Properties":{"Ordinal":18}},'
        '{"Column":"FrameCountByResolution","DataType":"int","Properties":{"Ordinal":19}},'
        '{"Column":"FrameCountByPage","DataType":"int","Properties":{"Ordinal":20}},'
        '{"Column":"HorizontalResolution","DataType":"real","Properties":{"Ordinal":21}},'
        '{"Column":"VerticalResolution","DataType":"real","Properties":{"Ordinal":22}},'
        '{"Column":"Flags","DataType":"int","Properties":{"Ordinal":23}},'
        '{"Column":"PixelFormat","DataType":"string","Properties":{"Ordinal":24}},'
        '{"Column":"PropertyItems","DataType":"dynamic","Properties":{"Ordinal":25}}'
    ']'

    */
    partial record PackageIcon
    {
        public int FieldCount => 26;

        public void WriteHeader(TextWriter writer)
        {
            writer.WriteLine("ScanId,ScanTimestamp,LowerId,Identity,Id,Version,CatalogCommitTimestamp,Created,ResultType,FileSize,MD5,SHA1,SHA256,SHA512,ContentType,Format,Width,Height,FrameCountByTime,FrameCountByResolution,FrameCountByPage,HorizontalResolution,VerticalResolution,Flags,PixelFormat,PropertyItems");
        }

        public void Write(List<string> fields)
        {
            fields.Add(ScanId.ToString());
            fields.Add(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            fields.Add(LowerId);
            fields.Add(Identity);
            fields.Add(Id);
            fields.Add(Version);
            fields.Add(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            fields.Add(CsvUtility.FormatDateTimeOffset(Created));
            fields.Add(ResultType.ToString());
            fields.Add(FileSize.ToString());
            fields.Add(MD5);
            fields.Add(SHA1);
            fields.Add(SHA256);
            fields.Add(SHA512);
            fields.Add(ContentType);
            fields.Add(Format);
            fields.Add(Width.ToString());
            fields.Add(Height.ToString());
            fields.Add(FrameCountByTime.ToString());
            fields.Add(FrameCountByResolution.ToString());
            fields.Add(FrameCountByPage.ToString());
            fields.Add(HorizontalResolution.ToString());
            fields.Add(VerticalResolution.ToString());
            fields.Add(Flags.ToString());
            fields.Add(PixelFormat);
            fields.Add(PropertyItems);
        }

        public void Write(TextWriter writer)
        {
            writer.Write(ScanId);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, LowerId);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Identity);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(Created));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ResultType.ToString());
            writer.Write(',');
            writer.Write(FileSize);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, MD5);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, SHA1);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, SHA256);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, SHA512);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ContentType);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Format);
            writer.Write(',');
            writer.Write(Width);
            writer.Write(',');
            writer.Write(Height);
            writer.Write(',');
            writer.Write(FrameCountByTime);
            writer.Write(',');
            writer.Write(FrameCountByResolution);
            writer.Write(',');
            writer.Write(FrameCountByPage);
            writer.Write(',');
            writer.Write(HorizontalResolution);
            writer.Write(',');
            writer.Write(VerticalResolution);
            writer.Write(',');
            writer.Write(Flags);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PixelFormat);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyItems);
            writer.WriteLine();
        }

        public async Task WriteAsync(TextWriter writer)
        {
            await writer.WriteAsync(ScanId.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, LowerId);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Identity);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Id);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Version);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(Created));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, ResultType.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(FileSize.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, MD5);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, SHA1);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, SHA256);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, SHA512);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, ContentType);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Format);
            await writer.WriteAsync(',');
            await writer.WriteAsync(Width.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(Height.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(FrameCountByTime.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(FrameCountByResolution.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(FrameCountByPage.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(HorizontalResolution.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(VerticalResolution.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(Flags.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, PixelFormat);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, PropertyItems);
            await writer.WriteLineAsync();
        }

        public ICsvRecord ReadNew(Func<string> getNextField)
        {
            return new PackageIcon
            {
                ScanId = CsvUtility.ParseNullable(getNextField(), Guid.Parse),
                ScanTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                LowerId = getNextField(),
                Identity = getNextField(),
                Id = getNextField(),
                Version = getNextField(),
                CatalogCommitTimestamp = CsvUtility.ParseDateTimeOffset(getNextField()),
                Created = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                ResultType = Enum.Parse<PackageIconResultType>(getNextField()),
                FileSize = CsvUtility.ParseNullable(getNextField(), long.Parse),
                MD5 = getNextField(),
                SHA1 = getNextField(),
                SHA256 = getNextField(),
                SHA512 = getNextField(),
                ContentType = getNextField(),
                Format = getNextField(),
                Width = CsvUtility.ParseNullable(getNextField(), int.Parse),
                Height = CsvUtility.ParseNullable(getNextField(), int.Parse),
                FrameCountByTime = CsvUtility.ParseNullable(getNextField(), int.Parse),
                FrameCountByResolution = CsvUtility.ParseNullable(getNextField(), int.Parse),
                FrameCountByPage = CsvUtility.ParseNullable(getNextField(), int.Parse),
                HorizontalResolution = CsvUtility.ParseNullable(getNextField(), float.Parse),
                VerticalResolution = CsvUtility.ParseNullable(getNextField(), float.Parse),
                Flags = CsvUtility.ParseNullable(getNextField(), int.Parse),
                PixelFormat = getNextField(),
                PropertyItems = getNextField(),
            };
        }
    }
}
