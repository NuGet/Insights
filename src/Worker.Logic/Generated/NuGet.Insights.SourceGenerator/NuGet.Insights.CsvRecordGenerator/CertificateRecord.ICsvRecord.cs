// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageCertificateToCsv
{
    /* Kusto DDL:

    .drop table Certificates ifexists;

    .create table Certificates (
        ResultType: string,
        Fingerprint: string,
        FingerprintSHA256Hex: string,
        FingerprintSHA1Hex: string,
        Subject: string,
        Issuer: string,
        NotBefore: datetime,
        NotAfter: datetime,
        SerialNumber: string,
        SignatureAlgorithmOid: string,
        Version: int,
        Extensions: dynamic,
        PublicKeyOid: string,
        RawDataLength: int,
        RawData: string,
        IssuerFingerprint: string,
        RootFingerprint: string,
        ChainLength: int,
        CodeSigningCommitTimestamp: datetime,
        CodeSigningStatus: string,
        CodeSigningStatusFlags: string,
        CodeSigningStatusUpdateTime: datetime,
        CodeSigningRevocationTime: datetime,
        TimestampingCommitTimestamp: datetime,
        TimestampingStatus: string,
        TimestampingStatusFlags: string,
        TimestampingStatusUpdateTime: datetime,
        TimestampingRevocationTime: datetime,
        Policies: dynamic
    ) with (docstring = "See https://github.com/NuGet/Insights/blob/main/docs/tables/Certificates.md", folder = "");

    .alter-merge table Certificates policy retention softdelete = 30d;

    .alter table Certificates policy partitioning '{'
      '"PartitionKeys": ['
        '{'
          '"ColumnName": "Fingerprint",'
          '"Kind": "Hash",'
          '"Properties": {'
            '"Function": "XxHash64",'
            '"MaxPartitionCount": 256'
          '}'
        '}'
      ']'
    '}';

    .create table Certificates ingestion csv mapping 'BlobStorageMapping'
    '['
        '{"Column":"ResultType","DataType":"string","Properties":{"Ordinal":2}},'
        '{"Column":"Fingerprint","DataType":"string","Properties":{"Ordinal":3}},'
        '{"Column":"FingerprintSHA256Hex","DataType":"string","Properties":{"Ordinal":4}},'
        '{"Column":"FingerprintSHA1Hex","DataType":"string","Properties":{"Ordinal":5}},'
        '{"Column":"Subject","DataType":"string","Properties":{"Ordinal":6}},'
        '{"Column":"Issuer","DataType":"string","Properties":{"Ordinal":7}},'
        '{"Column":"NotBefore","DataType":"datetime","Properties":{"Ordinal":8}},'
        '{"Column":"NotAfter","DataType":"datetime","Properties":{"Ordinal":9}},'
        '{"Column":"SerialNumber","DataType":"string","Properties":{"Ordinal":10}},'
        '{"Column":"SignatureAlgorithmOid","DataType":"string","Properties":{"Ordinal":11}},'
        '{"Column":"Version","DataType":"int","Properties":{"Ordinal":12}},'
        '{"Column":"Extensions","DataType":"dynamic","Properties":{"Ordinal":13}},'
        '{"Column":"PublicKeyOid","DataType":"string","Properties":{"Ordinal":14}},'
        '{"Column":"RawDataLength","DataType":"int","Properties":{"Ordinal":15}},'
        '{"Column":"RawData","DataType":"string","Properties":{"Ordinal":16}},'
        '{"Column":"IssuerFingerprint","DataType":"string","Properties":{"Ordinal":17}},'
        '{"Column":"RootFingerprint","DataType":"string","Properties":{"Ordinal":18}},'
        '{"Column":"ChainLength","DataType":"int","Properties":{"Ordinal":19}},'
        '{"Column":"CodeSigningCommitTimestamp","DataType":"datetime","Properties":{"Ordinal":20}},'
        '{"Column":"CodeSigningStatus","DataType":"string","Properties":{"Ordinal":21}},'
        '{"Column":"CodeSigningStatusFlags","DataType":"string","Properties":{"Ordinal":22}},'
        '{"Column":"CodeSigningStatusUpdateTime","DataType":"datetime","Properties":{"Ordinal":23}},'
        '{"Column":"CodeSigningRevocationTime","DataType":"datetime","Properties":{"Ordinal":24}},'
        '{"Column":"TimestampingCommitTimestamp","DataType":"datetime","Properties":{"Ordinal":25}},'
        '{"Column":"TimestampingStatus","DataType":"string","Properties":{"Ordinal":26}},'
        '{"Column":"TimestampingStatusFlags","DataType":"string","Properties":{"Ordinal":27}},'
        '{"Column":"TimestampingStatusUpdateTime","DataType":"datetime","Properties":{"Ordinal":28}},'
        '{"Column":"TimestampingRevocationTime","DataType":"datetime","Properties":{"Ordinal":29}},'
        '{"Column":"Policies","DataType":"dynamic","Properties":{"Ordinal":30}}'
    ']'

    */
    partial record CertificateRecord
    {
        public int FieldCount => 31;

        public void WriteHeader(TextWriter writer)
        {
            writer.WriteLine("ScanId,ScanTimestamp,ResultType,Fingerprint,FingerprintSHA256Hex,FingerprintSHA1Hex,Subject,Issuer,NotBefore,NotAfter,SerialNumber,SignatureAlgorithmOid,Version,Extensions,PublicKeyOid,RawDataLength,RawData,IssuerFingerprint,RootFingerprint,ChainLength,CodeSigningCommitTimestamp,CodeSigningStatus,CodeSigningStatusFlags,CodeSigningStatusUpdateTime,CodeSigningRevocationTime,TimestampingCommitTimestamp,TimestampingStatus,TimestampingStatusFlags,TimestampingStatusUpdateTime,TimestampingRevocationTime,Policies");
        }

        public void Write(List<string> fields)
        {
            fields.Add(ScanId.ToString());
            fields.Add(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            fields.Add(ResultType.ToString());
            fields.Add(Fingerprint);
            fields.Add(FingerprintSHA256Hex);
            fields.Add(FingerprintSHA1Hex);
            fields.Add(Subject);
            fields.Add(Issuer);
            fields.Add(CsvUtility.FormatDateTimeOffset(NotBefore));
            fields.Add(CsvUtility.FormatDateTimeOffset(NotAfter));
            fields.Add(SerialNumber);
            fields.Add(SignatureAlgorithmOid);
            fields.Add(Version.ToString());
            fields.Add(Extensions);
            fields.Add(PublicKeyOid);
            fields.Add(RawDataLength.ToString());
            fields.Add(RawData);
            fields.Add(IssuerFingerprint);
            fields.Add(RootFingerprint);
            fields.Add(ChainLength.ToString());
            fields.Add(CsvUtility.FormatDateTimeOffset(CodeSigningCommitTimestamp));
            fields.Add(CodeSigningStatus.ToString());
            fields.Add(CodeSigningStatusFlags.ToString());
            fields.Add(CsvUtility.FormatDateTimeOffset(CodeSigningStatusUpdateTime));
            fields.Add(CsvUtility.FormatDateTimeOffset(CodeSigningRevocationTime));
            fields.Add(CsvUtility.FormatDateTimeOffset(TimestampingCommitTimestamp));
            fields.Add(TimestampingStatus.ToString());
            fields.Add(TimestampingStatusFlags.ToString());
            fields.Add(CsvUtility.FormatDateTimeOffset(TimestampingStatusUpdateTime));
            fields.Add(CsvUtility.FormatDateTimeOffset(TimestampingRevocationTime));
            fields.Add(Policies);
        }

        public void Write(TextWriter writer)
        {
            writer.Write(ScanId);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ResultType.ToString());
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Fingerprint);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FingerprintSHA256Hex);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FingerprintSHA1Hex);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Subject);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Issuer);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(NotBefore));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(NotAfter));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, SerialNumber);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, SignatureAlgorithmOid);
            writer.Write(',');
            writer.Write(Version);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Extensions);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PublicKeyOid);
            writer.Write(',');
            writer.Write(RawDataLength);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, RawData);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, IssuerFingerprint);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, RootFingerprint);
            writer.Write(',');
            writer.Write(ChainLength);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CodeSigningCommitTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, CodeSigningStatus.ToString());
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, CodeSigningStatusFlags.ToString());
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CodeSigningStatusUpdateTime));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CodeSigningRevocationTime));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(TimestampingCommitTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, TimestampingStatus.ToString());
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, TimestampingStatusFlags.ToString());
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(TimestampingStatusUpdateTime));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(TimestampingRevocationTime));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Policies);
            writer.WriteLine();
        }

        public async Task WriteAsync(TextWriter writer)
        {
            await writer.WriteAsync(ScanId.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, ResultType.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Fingerprint);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, FingerprintSHA256Hex);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, FingerprintSHA1Hex);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Subject);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Issuer);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(NotBefore));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(NotAfter));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, SerialNumber);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, SignatureAlgorithmOid);
            await writer.WriteAsync(',');
            await writer.WriteAsync(Version.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Extensions);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, PublicKeyOid);
            await writer.WriteAsync(',');
            await writer.WriteAsync(RawDataLength.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, RawData);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, IssuerFingerprint);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, RootFingerprint);
            await writer.WriteAsync(',');
            await writer.WriteAsync(ChainLength.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(CodeSigningCommitTimestamp));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, CodeSigningStatus.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, CodeSigningStatusFlags.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(CodeSigningStatusUpdateTime));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(CodeSigningRevocationTime));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(TimestampingCommitTimestamp));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, TimestampingStatus.ToString());
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, TimestampingStatusFlags.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(TimestampingStatusUpdateTime));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(TimestampingRevocationTime));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Policies);
            await writer.WriteLineAsync();
        }

        public ICsvRecord ReadNew(Func<string> getNextField)
        {
            return new CertificateRecord
            {
                ScanId = CsvUtility.ParseNullable(getNextField(), Guid.Parse),
                ScanTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                ResultType = Enum.Parse<PackageCertificateResultType>(getNextField()),
                Fingerprint = getNextField(),
                FingerprintSHA256Hex = getNextField(),
                FingerprintSHA1Hex = getNextField(),
                Subject = getNextField(),
                Issuer = getNextField(),
                NotBefore = CsvUtility.ParseDateTimeOffset(getNextField()),
                NotAfter = CsvUtility.ParseDateTimeOffset(getNextField()),
                SerialNumber = getNextField(),
                SignatureAlgorithmOid = getNextField(),
                Version = int.Parse(getNextField()),
                Extensions = getNextField(),
                PublicKeyOid = getNextField(),
                RawDataLength = int.Parse(getNextField()),
                RawData = getNextField(),
                IssuerFingerprint = getNextField(),
                RootFingerprint = getNextField(),
                ChainLength = CsvUtility.ParseNullable(getNextField(), int.Parse),
                CodeSigningCommitTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                CodeSigningStatus = CsvUtility.ParseNullable(getNextField(), Enum.Parse<NuGet.Services.Validation.EndCertificateStatus>),
                CodeSigningStatusFlags = CsvUtility.ParseNullable(getNextField(), Enum.Parse<System.Security.Cryptography.X509Certificates.X509ChainStatusFlags>),
                CodeSigningStatusUpdateTime = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                CodeSigningRevocationTime = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                TimestampingCommitTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                TimestampingStatus = CsvUtility.ParseNullable(getNextField(), Enum.Parse<NuGet.Services.Validation.EndCertificateStatus>),
                TimestampingStatusFlags = CsvUtility.ParseNullable(getNextField(), Enum.Parse<System.Security.Cryptography.X509Certificates.X509ChainStatusFlags>),
                TimestampingStatusUpdateTime = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                TimestampingRevocationTime = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                Policies = getNextField(),
            };
        }

        public void SetEmptyStrings()
        {
            if (Fingerprint is null)
            {
                Fingerprint = string.Empty;
            }

            if (FingerprintSHA256Hex is null)
            {
                FingerprintSHA256Hex = string.Empty;
            }

            if (FingerprintSHA1Hex is null)
            {
                FingerprintSHA1Hex = string.Empty;
            }

            if (Subject is null)
            {
                Subject = string.Empty;
            }

            if (Issuer is null)
            {
                Issuer = string.Empty;
            }

            if (SerialNumber is null)
            {
                SerialNumber = string.Empty;
            }

            if (SignatureAlgorithmOid is null)
            {
                SignatureAlgorithmOid = string.Empty;
            }

            if (Extensions is null)
            {
                Extensions = string.Empty;
            }

            if (PublicKeyOid is null)
            {
                PublicKeyOid = string.Empty;
            }

            if (RawData is null)
            {
                RawData = string.Empty;
            }

            if (IssuerFingerprint is null)
            {
                IssuerFingerprint = string.Empty;
            }

            if (RootFingerprint is null)
            {
                RootFingerprint = string.Empty;
            }

            if (Policies is null)
            {
                Policies = string.Empty;
            }
        }
    }
}
