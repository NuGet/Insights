// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Collections.Generic;

namespace NuGet.Insights
{
    static partial class NuGetInsightsWorkerLogicKustoDDL
    {
        public const string PackageIconDefaultTableName = "PackageIcons";

        public static readonly IReadOnlyList<string> PackageIconDDL = new[]
        {
            ".drop table __TABLENAME__ ifexists",

            """
            .create table __TABLENAME__ (
                LowerId: string,
                Identity: string,
                Id: string,
                Version: string,
                CatalogCommitTimestamp: datetime,
                Created: datetime,
                ResultType: string,
                FileLength: long,
                FileSHA256: string,
                ContentType: string,
                HeaderFormat: string,
                AutoDetectedFormat: bool,
                Signature: string,
                Width: long,
                Height: long,
                FrameCount: int,
                IsOpaque: bool,
                FrameFormats: dynamic,
                FrameDimensions: dynamic,
                FrameAttributeNames: dynamic
            ) with (docstring = __DOCSTRING__, folder = __FOLDER__)
            """,

            ".alter-merge table __TABLENAME__ policy retention softdelete = 30d",

            """
            .create table __TABLENAME__ ingestion csv mapping 'BlobStorageMapping'
            '['
                '{"Column":"LowerId","DataType":"string","Properties":{"Ordinal":2}},'
                '{"Column":"Identity","DataType":"string","Properties":{"Ordinal":3}},'
                '{"Column":"Id","DataType":"string","Properties":{"Ordinal":4}},'
                '{"Column":"Version","DataType":"string","Properties":{"Ordinal":5}},'
                '{"Column":"CatalogCommitTimestamp","DataType":"datetime","Properties":{"Ordinal":6}},'
                '{"Column":"Created","DataType":"datetime","Properties":{"Ordinal":7}},'
                '{"Column":"ResultType","DataType":"string","Properties":{"Ordinal":8}},'
                '{"Column":"FileLength","DataType":"long","Properties":{"Ordinal":9}},'
                '{"Column":"FileSHA256","DataType":"string","Properties":{"Ordinal":10}},'
                '{"Column":"ContentType","DataType":"string","Properties":{"Ordinal":11}},'
                '{"Column":"HeaderFormat","DataType":"string","Properties":{"Ordinal":12}},'
                '{"Column":"AutoDetectedFormat","DataType":"bool","Properties":{"Ordinal":13}},'
                '{"Column":"Signature","DataType":"string","Properties":{"Ordinal":14}},'
                '{"Column":"Width","DataType":"long","Properties":{"Ordinal":15}},'
                '{"Column":"Height","DataType":"long","Properties":{"Ordinal":16}},'
                '{"Column":"FrameCount","DataType":"int","Properties":{"Ordinal":17}},'
                '{"Column":"IsOpaque","DataType":"bool","Properties":{"Ordinal":18}},'
                '{"Column":"FrameFormats","DataType":"dynamic","Properties":{"Ordinal":19}},'
                '{"Column":"FrameDimensions","DataType":"dynamic","Properties":{"Ordinal":20}},'
                '{"Column":"FrameAttributeNames","DataType":"dynamic","Properties":{"Ordinal":21}}'
            ']'
            """,
        };

        public const string PackageIconPartitioningPolicy =
            """
            .alter table __TABLENAME__ policy partitioning '{'
              '"PartitionKeys": ['
                '{'
                  '"ColumnName": "Identity",'
                  '"Kind": "Hash",'
                  '"Properties": {'
                    '"Function": "XxHash64",'
                    '"MaxPartitionCount": 256'
                  '}'
                '}'
              ']'
            '}'
            """;

        private static readonly bool PackageIconAddTypeToDefaultTableName = AddTypeToDefaultTableName(typeof(NuGet.Insights.Worker.PackageIconToCsv.PackageIcon), PackageIconDefaultTableName);

        private static readonly bool PackageIconAddTypeToDDL = AddTypeToDDL(typeof(NuGet.Insights.Worker.PackageIconToCsv.PackageIcon), PackageIconDDL);

        private static readonly bool PackageIconAddTypeToPartitioningPolicy = AddTypeToPartitioningPolicy(typeof(NuGet.Insights.Worker.PackageIconToCsv.PackageIcon), PackageIconPartitioningPolicy);
    }
}
