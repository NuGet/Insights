// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using MessagePack;
using MessagePack.Formatters;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageIconToCsv
{
    partial record PackageIcon
    {
        public class PackageIconMessagePackFormatter : IMessagePackFormatter<PackageIcon>
        {
            public void Serialize(ref MessagePackWriter writer, PackageIcon value, MessagePackSerializerOptions options)
            {
                if (value is null)
                {
                    writer.WriteNil();
                    return;
                }

                writer.WriteArrayHeader(22);

                MessagePackSerializer.Serialize(ref writer, value.ScanId, options);
                MessagePackSerializer.Serialize(ref writer, value.ScanTimestamp, options);
                writer.Write(value.LowerId);
                writer.Write(value.Identity);
                writer.Write(value.Id);
                writer.Write(value.Version);
                MessagePackSerializer.Serialize(ref writer, value.CatalogCommitTimestamp, options);
                MessagePackSerializer.Serialize(ref writer, value.Created, options);
                writer.Write((int)value.ResultType);
                MessagePackSerializer.Serialize(ref writer, value.FileLength, options);
                writer.Write(value.FileSHA256);
                writer.Write(value.ContentType);
                writer.Write(value.HeaderFormat);
                MessagePackSerializer.Serialize(ref writer, value.AutoDetectedFormat, options);
                writer.Write(value.Signature);
                MessagePackSerializer.Serialize(ref writer, value.Width, options);
                MessagePackSerializer.Serialize(ref writer, value.Height, options);
                MessagePackSerializer.Serialize(ref writer, value.FrameCount, options);
                MessagePackSerializer.Serialize(ref writer, value.IsOpaque, options);
                writer.Write(value.FrameFormats);
                writer.Write(value.FrameDimensions);
                writer.Write(value.FrameAttributeNames);
            }

            public PackageIcon Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
            {
                var count = reader.ReadArrayHeader();
                if (count != 22)
                {
                    throw new MessagePackSerializationException($"Invalid array length: {count}");
                }

                var record = new PackageIcon();

                record.ScanId = MessagePackSerializer.Deserialize<System.Guid?>(ref reader, options);
                record.ScanTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.LowerId = reader.ReadString();
                record.Identity = reader.ReadString();
                record.Id = reader.ReadString();
                record.Version = reader.ReadString();
                record.CatalogCommitTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset>(ref reader, options);
                record.Created = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.ResultType = (NuGet.Insights.Worker.PackageIconToCsv.PackageIconResultType)reader.ReadInt32();
                record.FileLength = MessagePackSerializer.Deserialize<long?>(ref reader, options);
                record.FileSHA256 = reader.ReadString();
                record.ContentType = reader.ReadString();
                record.HeaderFormat = reader.ReadString();
                record.AutoDetectedFormat = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.Signature = reader.ReadString();
                record.Width = MessagePackSerializer.Deserialize<long?>(ref reader, options);
                record.Height = MessagePackSerializer.Deserialize<long?>(ref reader, options);
                record.FrameCount = MessagePackSerializer.Deserialize<int?>(ref reader, options);
                record.IsOpaque = MessagePackSerializer.Deserialize<bool?>(ref reader, options);
                record.FrameFormats = reader.ReadString();
                record.FrameDimensions = reader.ReadString();
                record.FrameAttributeNames = reader.ReadString();

                return record;
            }
        }
    }
}