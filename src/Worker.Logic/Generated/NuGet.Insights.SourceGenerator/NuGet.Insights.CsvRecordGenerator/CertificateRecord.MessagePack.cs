// <auto-generated />

// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using MessagePack;
using MessagePack.Formatters;
using NuGet.Insights;

namespace NuGet.Insights.Worker.PackageCertificateToCsv
{
    partial record CertificateRecord
    {
        public class CertificateRecordMessagePackFormatter : IMessagePackFormatter<CertificateRecord>
        {
            public void Serialize(ref MessagePackWriter writer, CertificateRecord value, MessagePackSerializerOptions options)
            {
                if (value is null)
                {
                    writer.WriteNil();
                    return;
                }

                writer.WriteArrayHeader(31);

                MessagePackSerializer.Serialize(ref writer, value.ScanId, options);
                MessagePackSerializer.Serialize(ref writer, value.ScanTimestamp, options);
                writer.Write((int)value.ResultType);
                writer.Write(value.Fingerprint);
                writer.Write(value.FingerprintSHA256Hex);
                writer.Write(value.FingerprintSHA1Hex);
                writer.Write(value.Subject);
                writer.Write(value.Issuer);
                MessagePackSerializer.Serialize(ref writer, value.NotBefore, options);
                MessagePackSerializer.Serialize(ref writer, value.NotAfter, options);
                writer.Write(value.SerialNumber);
                writer.Write(value.SignatureAlgorithmOid);
                writer.Write(value.Version);
                writer.Write(value.Extensions);
                writer.Write(value.PublicKeyOid);
                writer.Write(value.RawDataLength);
                writer.Write(value.RawData);
                writer.Write(value.IssuerFingerprint);
                writer.Write(value.RootFingerprint);
                MessagePackSerializer.Serialize(ref writer, value.ChainLength, options);
                MessagePackSerializer.Serialize(ref writer, value.CodeSigningCommitTimestamp, options);
                MessagePackSerializer.Serialize(ref writer, value.CodeSigningStatus, options);
                MessagePackSerializer.Serialize(ref writer, value.CodeSigningStatusFlags, options);
                MessagePackSerializer.Serialize(ref writer, value.CodeSigningStatusUpdateTime, options);
                MessagePackSerializer.Serialize(ref writer, value.CodeSigningRevocationTime, options);
                MessagePackSerializer.Serialize(ref writer, value.TimestampingCommitTimestamp, options);
                MessagePackSerializer.Serialize(ref writer, value.TimestampingStatus, options);
                MessagePackSerializer.Serialize(ref writer, value.TimestampingStatusFlags, options);
                MessagePackSerializer.Serialize(ref writer, value.TimestampingStatusUpdateTime, options);
                MessagePackSerializer.Serialize(ref writer, value.TimestampingRevocationTime, options);
                writer.Write(value.Policies);
            }

            public CertificateRecord Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
            {
                var count = reader.ReadArrayHeader();
                if (count != 31)
                {
                    throw new MessagePackSerializationException($"Invalid array length: {count}");
                }

                var record = new CertificateRecord();

                record.ScanId = MessagePackSerializer.Deserialize<System.Guid?>(ref reader, options);
                record.ScanTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.ResultType = (NuGet.Insights.Worker.PackageCertificateToCsv.PackageCertificateResultType)reader.ReadInt32();
                record.Fingerprint = reader.ReadString();
                record.FingerprintSHA256Hex = reader.ReadString();
                record.FingerprintSHA1Hex = reader.ReadString();
                record.Subject = reader.ReadString();
                record.Issuer = reader.ReadString();
                record.NotBefore = MessagePackSerializer.Deserialize<System.DateTimeOffset>(ref reader, options);
                record.NotAfter = MessagePackSerializer.Deserialize<System.DateTimeOffset>(ref reader, options);
                record.SerialNumber = reader.ReadString();
                record.SignatureAlgorithmOid = reader.ReadString();
                record.Version = reader.ReadInt32();
                record.Extensions = reader.ReadString();
                record.PublicKeyOid = reader.ReadString();
                record.RawDataLength = reader.ReadInt32();
                record.RawData = reader.ReadString();
                record.IssuerFingerprint = reader.ReadString();
                record.RootFingerprint = reader.ReadString();
                record.ChainLength = MessagePackSerializer.Deserialize<int?>(ref reader, options);
                record.CodeSigningCommitTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.CodeSigningStatus = MessagePackSerializer.Deserialize<NuGet.Services.Validation.EndCertificateStatus?>(ref reader, options);
                record.CodeSigningStatusFlags = MessagePackSerializer.Deserialize<System.Security.Cryptography.X509Certificates.X509ChainStatusFlags?>(ref reader, options);
                record.CodeSigningStatusUpdateTime = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.CodeSigningRevocationTime = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.TimestampingCommitTimestamp = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.TimestampingStatus = MessagePackSerializer.Deserialize<NuGet.Services.Validation.EndCertificateStatus?>(ref reader, options);
                record.TimestampingStatusFlags = MessagePackSerializer.Deserialize<System.Security.Cryptography.X509Certificates.X509ChainStatusFlags?>(ref reader, options);
                record.TimestampingStatusUpdateTime = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.TimestampingRevocationTime = MessagePackSerializer.Deserialize<System.DateTimeOffset?>(ref reader, options);
                record.Policies = reader.ReadString();

                return record;
            }
        }
    }
}