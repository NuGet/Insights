From 6f59182ff71f4075cc6fbb757b1b646676933cb2 Mon Sep 17 00:00:00 2001
Date: Sat, 5 Oct 2024 15:47:12 -0400
Subject: [PATCH] Make AccessTokenCache reusable

---
 .../BearerTokenAuthenticationPolicy.cs        | 55 +++++++++++++------
 1 file changed, 38 insertions(+), 17 deletions(-)

diff --git a/src/Forks/Azure/azure-sdk-for-net/sdk/core/Azure.Core/src/Pipeline/BearerTokenAuthenticationPolicy.cs b/src/Forks/Azure/azure-sdk-for-net/sdk/core/Azure.Core/src/Pipeline/BearerTokenAuthenticationPolicy.cs
index c1c1aa92..a27a98d0 100644
--- a/src/Forks/Azure/azure-sdk-for-net/sdk/core/Azure.Core/src/Pipeline/BearerTokenAuthenticationPolicy.cs
+++ b/src/Forks/Azure/azure-sdk-for-net/sdk/core/Azure.Core/src/Pipeline/BearerTokenAuthenticationPolicy.cs
@@ -10,7 +10,12 @@ using System.Threading;
 using System.Threading.Tasks;
 using Azure.Core.Diagnostics;
 
-namespace Azure.Core.Pipeline
+using Microsoft.Extensions.Logging;
+using Microsoft.Extensions.Logging.Abstractions;
+
+#nullable enable
+
+namespace Azure.Core.Pipeline.Fork
 {
     /// <summary>
     /// A policy that sends an <see cref="AccessToken"/> provided by a <see cref="TokenCredential"/> as an Authentication header.
@@ -139,9 +144,9 @@ namespace Azure.Core.Pipeline
                     string enc => Encoding.UTF8.GetString(Convert.FromBase64String(enc))
                 };
             }
-            catch (FormatException ex)
+            catch (FormatException)
             {
-                AzureCoreEventSource.Singleton.FailedToDecodeCaeChallengeClaims(encodedClaims, ex.ToString());
+                // AzureCoreEventSource.Singleton.FailedToDecodeCaeChallengeClaims(encodedClaims, ex.ToString());
             }
             if (decodedClaims == null)
             {
@@ -201,8 +206,11 @@ namespace Azure.Core.Pipeline
         /// <param name="context">The <see cref="TokenRequestContext"/> used to authorize the <see cref="Request"/>.</param>
         protected async ValueTask AuthenticateAndAuthorizeRequestAsync(HttpMessage message, TokenRequestContext context)
         {
+            await ValueTask.CompletedTask;
+            /*
             string headerValue = await _accessTokenCache.GetAuthHeaderValueAsync(message, context, true).ConfigureAwait(false);
-            message.Request.Headers.SetValue(HttpHeader.Names.Authorization, headerValue);
+            mesage.Request.Headers.SetValue(HttpHeader.Names.Authorization, headerValue);
+            */
         }
 
         /// <summary>
@@ -212,8 +220,10 @@ namespace Azure.Core.Pipeline
         /// <param name="context">The <see cref="TokenRequestContext"/> used to authorize the <see cref="Request"/>.</param>
         protected void AuthenticateAndAuthorizeRequest(HttpMessage message, TokenRequestContext context)
         {
+            /*
             string headerValue = _accessTokenCache.GetAuthHeaderValueAsync(message, context, false).EnsureCompleted();
             message.Request.Headers.SetValue(HttpHeader.Names.Authorization, headerValue);
+            */
         }
 
         internal class AccessTokenCache
@@ -233,7 +243,18 @@ namespace Azure.Core.Pipeline
                 _tokenRefreshRetryDelay = tokenRefreshRetryDelay;
             }
 
-            public async ValueTask<string> GetAuthHeaderValueAsync(HttpMessage message, TokenRequestContext context, bool async)
+
+            private readonly ILogger _logger = NullLogger.Instance;
+
+            public AccessTokenCache(TokenCredential credential, TimeSpan tokenRefreshOffset, TimeSpan tokenRefreshRetryDelay, ILogger logger)
+            {
+                _credential = credential;
+                _tokenRefreshOffset = tokenRefreshOffset;
+                _tokenRefreshRetryDelay = tokenRefreshRetryDelay;
+                _logger = logger;
+            }
+
+            public async ValueTask<AccessToken> GetAuthHeaderValueAsync(CancellationToken token, TokenRequestContext context, bool async)
             {
                 bool shouldRefreshFromCredential;
                 int maxCancellationRetries = 3;
@@ -247,14 +268,14 @@ namespace Azure.Core.Pipeline
                     {
                         if (localState.BackgroundTokenUpdateTcs != null)
                         {
-                            headerValueInfo = await localState.GetCurrentHeaderValue(async, false, message.CancellationToken).ConfigureAwait(false);
+                            headerValueInfo = await localState.GetCurrentHeaderValue(async, false, token).ConfigureAwait(false);
                             _ = Task.Run(() => GetHeaderValueFromCredentialInBackgroundAsync(localState.BackgroundTokenUpdateTcs, headerValueInfo, context, async));
                             return headerValueInfo.HeaderValue;
                         }
 
                         try
                         {
-                            await SetResultOnTcsFromCredentialAsync(context, localState.CurrentTokenTcs, async, message.CancellationToken).ConfigureAwait(false);
+                            await SetResultOnTcsFromCredentialAsync(context, localState.CurrentTokenTcs, async, token).ConfigureAwait(false);
                         }
                         catch (OperationCanceledException)
                         {
@@ -270,15 +291,15 @@ namespace Azure.Core.Pipeline
 
                     try
                     {
-                        headerValueInfo = await localState.GetCurrentHeaderValue(async, true, message.CancellationToken).ConfigureAwait(false);
+                        headerValueInfo = await localState.GetCurrentHeaderValue(async, true, token).ConfigureAwait(false);
                         return headerValueInfo.HeaderValue;
                     }
-                    catch (TaskCanceledException) when (!message.CancellationToken.IsCancellationRequested)
+                    catch (TaskCanceledException) when (!token.IsCancellationRequested)
                     {
                         maxCancellationRetries--;
 
                         // If the current message has no CancellationToken and we have tried this 3 times, throw.
-                        if (!message.CancellationToken.CanBeCanceled && maxCancellationRetries <= 0)
+                        if (!token.CanBeCanceled && maxCancellationRetries <= 0)
                         {
                             throw;
                         }
@@ -376,12 +397,12 @@ namespace Azure.Core.Pipeline
                 catch (OperationCanceledException oce) when (cts.IsCancellationRequested)
                 {
                     backgroundUpdateTcs.SetResult(new AuthHeaderValueInfo(currentAuthHeaderInfo.HeaderValue, currentAuthHeaderInfo.ExpiresOn, DateTimeOffset.UtcNow));
-                    AzureCoreEventSource.Singleton.BackgroundRefreshFailed(context.ParentRequestId ?? string.Empty, oce.ToString());
+                    _logger.LogWarning(oce, "Background token refresh failed with cancellation on parent request ID {ParentRequestId}", context.ParentRequestId);
                 }
                 catch (Exception e)
                 {
                     backgroundUpdateTcs.SetResult(new AuthHeaderValueInfo(currentAuthHeaderInfo.HeaderValue, currentAuthHeaderInfo.ExpiresOn, DateTimeOffset.UtcNow + _tokenRefreshRetryDelay));
-                    AzureCoreEventSource.Singleton.BackgroundRefreshFailed(context.ParentRequestId ?? string.Empty, e.ToString());
+                    _logger.LogWarning(e, "Background token refresh failed on parent request ID {ParentRequestId}", context.ParentRequestId);
                 }
                 finally
                 {
@@ -395,16 +416,16 @@ namespace Azure.Core.Pipeline
                     ? await _credential.GetTokenAsync(context, cancellationToken).ConfigureAwait(false)
                     : _credential.GetToken(context, cancellationToken);
 
-                targetTcs.SetResult(new AuthHeaderValueInfo("Bearer " + token.Token, token.ExpiresOn, token.RefreshOn.HasValue ? token.RefreshOn.Value : token.ExpiresOn - _tokenRefreshOffset));
+                targetTcs.SetResult(new AuthHeaderValueInfo(token, token.ExpiresOn, token.RefreshOn.HasValue ? token.RefreshOn.Value : token.ExpiresOn - _tokenRefreshOffset));
             }
 
             internal readonly struct AuthHeaderValueInfo
             {
-                public string HeaderValue { get; }
+                public AccessToken HeaderValue { get; }
                 public DateTimeOffset ExpiresOn { get; }
                 public DateTimeOffset RefreshOn { get; }
 
-                public AuthHeaderValueInfo(string headerValue, DateTimeOffset expiresOn, DateTimeOffset refreshOn)
+                public AuthHeaderValueInfo(AccessToken headerValue, DateTimeOffset expiresOn, DateTimeOffset refreshOn)
                 {
                     HeaderValue = headerValue;
                     ExpiresOn = expiresOn;
@@ -428,8 +449,8 @@ namespace Azure.Core.Pipeline
 
                 public bool IsCurrentContextMismatched(TokenRequestContext context) =>
                     (context.Scopes != null && !context.Scopes.AsSpan().SequenceEqual(CurrentContext.Scopes.AsSpan())) ||
-                    !string.Equals(context.Claims, CurrentContext.Claims) ||
-                    (context.TenantId != null && !string.Equals(context.TenantId, CurrentContext.TenantId));
+                    !string.Equals(context.Claims, CurrentContext.Claims, StringComparison.Ordinal) ||
+                    (context.TenantId != null && !string.Equals(context.TenantId, CurrentContext.TenantId, StringComparison.Ordinal));
 
                 public bool IsBackgroundTokenAvailable(DateTimeOffset now) =>
                     BackgroundTokenUpdateTcs != null &&
-- 
2.43.0.windows.1

