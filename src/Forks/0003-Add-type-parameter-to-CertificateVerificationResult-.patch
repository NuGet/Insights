From 4eafedb7a81ec5ea31a80beb45bd300e97ac48bb Mon Sep 17 00:00:00 2001
Date: Tue, 6 Aug 2024 12:17:42 -0400
Subject: [PATCH] Add type parameter to CertificateVerificationResult to plumb
 chain info

---
 .../CertificateVerificationResult.cs          | 24 +++++++++++++++----
 .../ICertificateVerifier.cs                   |  8 +++----
 .../OnlineCertificateVerifier.cs              | 22 +++++++++--------
 3 files changed, 36 insertions(+), 18 deletions(-)

diff --git a/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/CertificateVerificationResult.cs b/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/CertificateVerificationResult.cs
index dc864be7..7dcc084c 100644
--- a/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/CertificateVerificationResult.cs
+++ b/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/CertificateVerificationResult.cs
@@ -1,4 +1,4 @@
-﻿﻿// Copyright (c) .NET Foundation. All rights reserved.
+﻿// Copyright (c) .NET Foundation. All rights reserved.
 // Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
 
 using System;
@@ -11,18 +11,20 @@ namespace Validation.PackageSigning.ValidateCertificate
     /// The result of a <see cref="X509Certificate2"/> verification by the
     /// <see cref="ICertificateValidationService"/>.
     /// </summary>
-    public class CertificateVerificationResult
+    public class CertificateVerificationResult<T>
     {
         /// <summary>
         /// Create a new verification result.
         /// </summary>
         /// <param name="status">The determined status of the verified certificate.</param>
         /// <param name="statusFlags">The flags explaining the certificate's status.</param>
+        /// <param name="chainInfo">Information extracted from the built chain.</param>
         /// <param name="statusUpdateTime">The time the revocation info was published.</param>
         /// <param name="revocationTime">The date the certificate was revoked, if applicable.</param>
         public CertificateVerificationResult(
             EndCertificateStatus status,
             X509ChainStatusFlags statusFlags,
+            T chainInfo,
             DateTime? statusUpdateTime = null,
             DateTime? revocationTime = null)
         {
@@ -82,6 +84,7 @@ namespace Validation.PackageSigning.ValidateCertificate
 
             Status = status;
             StatusFlags = statusFlags;
+            ChainInfo = chainInfo;
             StatusUpdateTime = statusUpdateTime;
             RevocationTime = revocationTime;
         }
@@ -96,6 +99,11 @@ namespace Validation.PackageSigning.ValidateCertificate
         /// </summary>
         public X509ChainStatusFlags StatusFlags { get; }
 
+        /// <summary>
+        /// Information extracted from the built chain. This is used to capture state from the chain before it is disposed.
+        /// </summary>
+        public T ChainInfo { get; }
+
         /// <summary>
         /// The time that the end <see cref="X509Certificate2"/>'s status was last updated, according to the
         /// Certificate Authority. This value may be <c>null</c> if the <see cref="Status"/> is
@@ -141,6 +149,7 @@ namespace Validation.PackageSigning.ValidateCertificate
         {
             private EndCertificateStatus _status;
             private X509ChainStatusFlags _statusFlags;
+            private T _chainInfo;
             private DateTime? _statusUpdateTime;
             private DateTime? _revocationTime;
 
@@ -156,6 +165,12 @@ namespace Validation.PackageSigning.ValidateCertificate
                 return this;
             }
 
+            public Builder WithChainInfo(T value)
+            {
+                _chainInfo = value;
+                return this;
+            }
+
             public Builder WithStatusUpdateTime(DateTime? value)
             {
                 _statusUpdateTime = value;
@@ -168,11 +183,12 @@ namespace Validation.PackageSigning.ValidateCertificate
                 return this;
             }
 
-            public CertificateVerificationResult Build()
+            public CertificateVerificationResult<T> Build()
             {
-                return new CertificateVerificationResult(
+                return new CertificateVerificationResult<T>(
                     _status,
                     _statusFlags,
+                    _chainInfo,
                     _statusUpdateTime,
                     _revocationTime);
             }
diff --git a/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/ICertificateVerifier.cs b/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/ICertificateVerifier.cs
index 3e087b52..d416f0fd 100644
--- a/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/ICertificateVerifier.cs
+++ b/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/ICertificateVerifier.cs
@@ -1,4 +1,4 @@
-﻿﻿// Copyright (c) .NET Foundation. All rights reserved.
+﻿// Copyright (c) .NET Foundation. All rights reserved.
 // Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
 
 using System;
@@ -19,7 +19,7 @@ namespace Validation.PackageSigning.ValidateCertificate
         /// <param name="extraCertificates">A collection of certificates that may be used to build the certificate chain.</param>
         /// <returns>The result of the verification.</returns>
         [Obsolete("This will be removed when integration tests are created")]
-        CertificateVerificationResult VerifyCertificate(X509Certificate2 certificate, X509Certificate2[] extraCertificates);
+        CertificateVerificationResult<T> VerifyCertificate<T>(X509Certificate2 certificate, X509Certificate2[] extraCertificates, Func<X509Chain, T> getChainInfo);
 
         /// <summary>
         /// Determine the status of a code signing <see cref="X509Certificate2"/>.
@@ -27,7 +27,7 @@ namespace Validation.PackageSigning.ValidateCertificate
         /// <param name="certificate">The certificate to verify.</param>
         /// <param name="extraCertificates">A collection of certificates that may be used to build the certificate chain.</param>
         /// <returns>The result of the verification.</returns>
-        CertificateVerificationResult VerifyCodeSigningCertificate(X509Certificate2 certificate, IReadOnlyList<X509Certificate2> extraCertificates);
+        CertificateVerificationResult<T> VerifyCodeSigningCertificate<T>(X509Certificate2 certificate, IReadOnlyList<X509Certificate2> extraCertificates, Func<X509Chain, T> getChainInfo);
 
         /// <summary>
         /// Determine the status of a timestamping <see cref="X509Certificate2"/>.
@@ -35,6 +35,6 @@ namespace Validation.PackageSigning.ValidateCertificate
         /// <param name="certificate">The certificate to verify.</param>
         /// <param name="extraCertificates">A collection of certificates that may be used to build the certificate chain.</param>
         /// <returns>The result of the verification.</returns>
-        CertificateVerificationResult VerifyTimestampingCertificate(X509Certificate2 certificate, IReadOnlyList<X509Certificate2> extraCertificates);
+        CertificateVerificationResult<T> VerifyTimestampingCertificate<T>(X509Certificate2 certificate, IReadOnlyList<X509Certificate2> extraCertificates, Func<X509Chain, T> getChainInfo);
     }
 }
diff --git a/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/OnlineCertificateVerifier.cs b/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/OnlineCertificateVerifier.cs
index 1a86363a..a1175d0e 100644
--- a/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/OnlineCertificateVerifier.cs
+++ b/src/Forks/NuGet/NuGetGallery/src/Validation.PackageSigning.ValidateCertificate/OnlineCertificateVerifier.cs
@@ -1,4 +1,4 @@
-﻿﻿// Copyright (c) .NET Foundation. All rights reserved.
+﻿// Copyright (c) .NET Foundation. All rights reserved.
 // Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
 
 using System;
@@ -49,22 +49,22 @@ namespace Validation.PackageSigning.ValidateCertificate
         
         private readonly ILogger<OnlineCertificateVerifier> _logger;
 
-        public CertificateVerificationResult VerifyCertificate(X509Certificate2 certificate, X509Certificate2[] extraCertificates)
+        public CertificateVerificationResult<T> VerifyCertificate<T>(X509Certificate2 certificate, X509Certificate2[] extraCertificates, Func<X509Chain, T> getChainInfo)
         {
-            return VerifyCertificate(certificate, extraCertificates, applicationPolicy: null);
+            return VerifyCertificate(certificate, extraCertificates, applicationPolicy: null, getChainInfo);
         }
 
-        public CertificateVerificationResult VerifyCodeSigningCertificate(X509Certificate2 certificate, IReadOnlyList<X509Certificate2> extraCertificates)
+        public CertificateVerificationResult<T> VerifyCodeSigningCertificate<T>(X509Certificate2 certificate, IReadOnlyList<X509Certificate2> extraCertificates, Func<X509Chain, T> getChainInfo)
         {
-            return VerifyCertificate(certificate, extraCertificates, applicationPolicy: new Oid(CodeSigningEku));
+            return VerifyCertificate(certificate, extraCertificates, applicationPolicy: new Oid(CodeSigningEku), getChainInfo);
         }
 
-        public CertificateVerificationResult VerifyTimestampingCertificate(X509Certificate2 certificate, IReadOnlyList<X509Certificate2> extraCertificates)
+        public CertificateVerificationResult<T> VerifyTimestampingCertificate<T>(X509Certificate2 certificate, IReadOnlyList<X509Certificate2> extraCertificates, Func<X509Chain, T> getChainInfo)
         {
-            return VerifyCertificate(certificate, extraCertificates, applicationPolicy: new Oid(TimeStampingEku));
+            return VerifyCertificate(certificate, extraCertificates, applicationPolicy: new Oid(TimeStampingEku), getChainInfo);
         }
 
-        private CertificateVerificationResult VerifyCertificate(X509Certificate2 certificate, IReadOnlyList<X509Certificate2> extraCertificates, Oid applicationPolicy)
+        private CertificateVerificationResult<T> VerifyCertificate<T>(X509Certificate2 certificate, IReadOnlyList<X509Certificate2> extraCertificates, Oid applicationPolicy, Func<X509Chain, T> getChainInfo)
         {
             _logger.LogInformation("Verifying certificate {SubjectName}, {Thumbprint}",
                 certificate.Subject,
@@ -88,7 +88,7 @@ namespace Validation.PackageSigning.ValidateCertificate
                     chain.ChainPolicy.RevocationMode = X509RevocationMode.Online;
                     chain.ChainPolicy.RevocationFlag = X509RevocationFlag.ExcludeRoot;
 
-                    var resultBuilder = new CertificateVerificationResult.Builder();
+                    var resultBuilder = new CertificateVerificationResult<T>.Builder();
                     var chainBuildSucceeded = chain.Build(certificate);
                     if (chainBuildSucceeded)
                     {
@@ -108,6 +108,8 @@ namespace Validation.PackageSigning.ValidateCertificate
                         }
                     }
 
+                    resultBuilder.WithChainInfo(getChainInfo(chain));
+
                     return resultBuilder.Build();
                 }
                 finally
@@ -214,7 +216,7 @@ namespace Validation.PackageSigning.ValidateCertificate
             return result;
         }
 
-        private unsafe void AddRevocationInfo(X509Chain chain, X509Certificate2 certificate, CertificateVerificationResult.Builder resultBuilder)
+        private unsafe void AddRevocationInfo<T>(X509Chain chain, X509Certificate2 certificate, CertificateVerificationResult<T>.Builder resultBuilder)
         {
             var addedRef = false;
             var chainHandle = chain.SafeHandle;
-- 
2.46.0.windows.1

