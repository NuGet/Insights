// <auto-generated />
using System.IO;
using Knapcode.ExplorePackages;

namespace Knapcode.ExplorePackages.Worker.FindPackageAssets
{
    partial class PackageAsset
    {
        public void Write(TextWriter writer)
        {
            writer.Write(ScanId);
            writer.Write(',');
            writer.Write(ScanTimestamp?.ToString("O"));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            writer.Write(Created.ToString("O"));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, ResultType);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PatternSet);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyAnyValue);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyCodeLanguage);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyTargetFrameworkMoniker);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyLocale);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyManagedAssembly);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyMSBuild);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyRuntimeIdentifier);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertySatelliteAssembly);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Path);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FileName);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FileExtension);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, TopLevelFolder);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, RoundTripTargetFrameworkMoniker);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FrameworkName);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FrameworkVersion);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FrameworkProfile);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PlatformName);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PlatformVersion);
            writer.WriteLine();
        }
    }
}
