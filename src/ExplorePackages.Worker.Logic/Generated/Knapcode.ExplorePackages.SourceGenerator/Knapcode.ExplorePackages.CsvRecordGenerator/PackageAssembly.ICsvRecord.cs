// <auto-generated />
using System;
using System.IO;
using Knapcode.ExplorePackages;

namespace Knapcode.ExplorePackages.Worker.FindPackageAssemblies
{
    /* Kusto DDL:

    .drop table JverPackageAssemblies;

    .create table JverPackageAssemblies (
        ScanId: guid,
        ScanTimestamp: datetime,
        Id: string,
        Version: string,
        CatalogCommitTimestamp: datetime,
        Created: datetime,
        ResultType: string,
        Path: string,
        CompressedLength: long,
        UncompressedLength: long,
        Name: string,
        AssemblyVersion: string,
        Culture: string,
        AssemblyNameHasCultureNotFoundException: bool,
        AssemblyNameHasFileLoadException: bool,
        PublicKeyToken: string,
        PublicKeyTokenHasSecurityException: bool,
        HashAlgorithm: string,
        HasPublicKey: bool,
        PublicKeyLength: int,
        PublicKeyHash: string
    );

    .create table JverPackageAssemblies ingestion csv mapping 'JverPackageAssemblies_mapping' '[{"Name":"ScanId","Ordinal":0,"DataType":"guid"},{"Name":"ScanTimestamp","Ordinal":1,"DataType":"datetime"},{"Name":"Id","Ordinal":2,"DataType":"string"},{"Name":"Version","Ordinal":3,"DataType":"string"},{"Name":"CatalogCommitTimestamp","Ordinal":4,"DataType":"datetime"},{"Name":"Created","Ordinal":5,"DataType":"datetime"},{"Name":"ResultType","Ordinal":6,"DataType":"string"},{"Name":"Path","Ordinal":7,"DataType":"string"},{"Name":"CompressedLength","Ordinal":8,"DataType":"long"},{"Name":"UncompressedLength","Ordinal":9,"DataType":"long"},{"Name":"Name","Ordinal":10,"DataType":"string"},{"Name":"AssemblyVersion","Ordinal":11,"DataType":"string"},{"Name":"Culture","Ordinal":12,"DataType":"string"},{"Name":"AssemblyNameHasCultureNotFoundException","Ordinal":13,"DataType":"bool"},{"Name":"AssemblyNameHasFileLoadException","Ordinal":14,"DataType":"bool"},{"Name":"PublicKeyToken","Ordinal":15,"DataType":"string"},{"Name":"PublicKeyTokenHasSecurityException","Ordinal":16,"DataType":"bool"},{"Name":"HashAlgorithm","Ordinal":17,"DataType":"string"},{"Name":"HasPublicKey","Ordinal":18,"DataType":"bool"},{"Name":"PublicKeyLength","Ordinal":19,"DataType":"int"},{"Name":"PublicKeyHash","Ordinal":20,"DataType":"string"}]'

    */
    partial class PackageAssembly
    {
        public void Write(TextWriter writer)
        {
            writer.Write(ScanId);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(Created));
            writer.Write(',');
            writer.Write(ResultType);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Path);
            writer.Write(',');
            writer.Write(CompressedLength);
            writer.Write(',');
            writer.Write(UncompressedLength);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Name);
            writer.Write(',');
            writer.Write(AssemblyVersion);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Culture);
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(AssemblyNameHasCultureNotFoundException));
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(AssemblyNameHasFileLoadException));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PublicKeyToken);
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(PublicKeyTokenHasSecurityException));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, HashAlgorithm);
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(HasPublicKey));
            writer.Write(',');
            writer.Write(PublicKeyLength);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PublicKeyHash);
            writer.WriteLine();
        }

        public void Read(Func<string> getNextField)
        {
            ScanId = CsvUtility.ParseNullable(getNextField(), Guid.Parse);
            ScanTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset);
            Id = getNextField();
            Version = getNextField();
            CatalogCommitTimestamp = CsvUtility.ParseDateTimeOffset(getNextField());
            Created = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset);
            ResultType = Enum.Parse<PackageAssemblyResultType>(getNextField());
            Path = getNextField();
            CompressedLength = CsvUtility.ParseNullable(getNextField(), long.Parse);
            UncompressedLength = CsvUtility.ParseNullable(getNextField(), long.Parse);
            Name = getNextField();
            AssemblyVersion = CsvUtility.ParseReference(getNextField(), System.Version.Parse);
            Culture = getNextField();
            AssemblyNameHasCultureNotFoundException = CsvUtility.ParseNullable(getNextField(), bool.Parse);
            AssemblyNameHasFileLoadException = CsvUtility.ParseNullable(getNextField(), bool.Parse);
            PublicKeyToken = getNextField();
            PublicKeyTokenHasSecurityException = CsvUtility.ParseNullable(getNextField(), bool.Parse);
            HashAlgorithm = getNextField();
            HasPublicKey = CsvUtility.ParseNullable(getNextField(), bool.Parse);
            PublicKeyLength = CsvUtility.ParseNullable(getNextField(), int.Parse);
            PublicKeyHash = getNextField();
        }
    }
}
