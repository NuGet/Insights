// <auto-generated />

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Knapcode.ExplorePackages;

namespace Knapcode.ExplorePackages.Worker.DownloadsToCsv
{
    /* Kusto DDL:

    .drop table JverPackageDownloads ifexists;

    .create table JverPackageDownloads (
        AsOfTimestamp: datetime,
        LowerId: string,
        Identity: string,
        Id: string,
        Version: string,
        Downloads: long,
        TotalDownloads: long
    );

    .alter-merge table JverPackageDownloads policy retention softdelete = 30d;

    .alter table JverPackageDownloads policy partitioning '{'
      '"PartitionKeys": ['
        '{'
          '"ColumnName": "Identity",'
          '"Kind": "Hash",'
          '"Properties": {'
            '"Function": "XxHash64",'
            '"MaxPartitionCount": 256'
          '}'
        '}'
      ']'
    '}';

    .create table JverPackageDownloads ingestion csv mapping 'JverPackageDownloads_mapping'
    '['
        '{"Column":"AsOfTimestamp","DataType":"datetime","Properties":{"Ordinal":0}},'
        '{"Column":"LowerId","DataType":"string","Properties":{"Ordinal":1}},'
        '{"Column":"Identity","DataType":"string","Properties":{"Ordinal":2}},'
        '{"Column":"Id","DataType":"string","Properties":{"Ordinal":3}},'
        '{"Column":"Version","DataType":"string","Properties":{"Ordinal":4}},'
        '{"Column":"Downloads","DataType":"long","Properties":{"Ordinal":5}},'
        '{"Column":"TotalDownloads","DataType":"long","Properties":{"Ordinal":6}}'
    ']'

    */
    partial record PackageDownloadRecord
    {
        public int FieldCount => 7;

        public void Write(List<string> fields)
        {
            fields.Add(CsvUtility.FormatDateTimeOffset(AsOfTimestamp));
            fields.Add(LowerId);
            fields.Add(Identity);
            fields.Add(Id);
            fields.Add(Version);
            fields.Add(Downloads.ToString());
            fields.Add(TotalDownloads.ToString());
        }

        public void Write(TextWriter writer)
        {
            writer.Write(CsvUtility.FormatDateTimeOffset(AsOfTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, LowerId);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Identity);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            writer.Write(Downloads);
            writer.Write(',');
            writer.Write(TotalDownloads);
            writer.WriteLine();
        }

        public async Task WriteAsync(TextWriter writer)
        {
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(AsOfTimestamp));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, LowerId);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Identity);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Id);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Version);
            await writer.WriteAsync(',');
            await writer.WriteAsync(Downloads.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(TotalDownloads.ToString());
            await writer.WriteLineAsync();
        }

        public PackageDownloadRecord Read(Func<string> getNextField)
        {
            return new PackageDownloadRecord
            {
                AsOfTimestamp = CsvUtility.ParseDateTimeOffset(getNextField()),
                LowerId = getNextField(),
                Identity = getNextField(),
                Id = getNextField(),
                Version = getNextField(),
                Downloads = long.Parse(getNextField()),
                TotalDownloads = long.Parse(getNextField()),
            };
        }
    }
}
