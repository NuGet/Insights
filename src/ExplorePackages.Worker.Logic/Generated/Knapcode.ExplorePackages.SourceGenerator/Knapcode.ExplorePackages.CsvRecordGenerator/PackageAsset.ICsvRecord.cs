// <auto-generated />

using System;
using System.IO;
using Knapcode.ExplorePackages;

namespace Knapcode.ExplorePackages.Worker.FindPackageAsset
{
    /* Kusto DDL:

    .drop table JverPackageAssets;

    .create table JverPackageAssets (
        ScanId: guid,
        ScanTimestamp: datetime,
        Id: string,
        Version: string,
        CatalogCommitTimestamp: datetime,
        Created: datetime,
        ResultType: string,
        PatternSet: string,
        PropertyAnyValue: string,
        PropertyCodeLanguage: string,
        PropertyTargetFrameworkMoniker: string,
        PropertyLocale: string,
        PropertyManagedAssembly: string,
        PropertyMSBuild: string,
        PropertyRuntimeIdentifier: string,
        PropertySatelliteAssembly: string,
        Path: string,
        FileName: string,
        FileExtension: string,
        TopLevelFolder: string,
        RoundTripTargetFrameworkMoniker: string,
        FrameworkName: string,
        FrameworkVersion: string,
        FrameworkProfile: string,
        PlatformName: string,
        PlatformVersion: string
    );

    .create table JverPackageAssets ingestion csv mapping 'JverPackageAssets_mapping'
    '['
        '{"Column":"ScanId","DataType":"guid","Properties":{"Ordinal":0}},'
        '{"Column":"ScanTimestamp","DataType":"datetime","Properties":{"Ordinal":1}},'
        '{"Column":"Id","DataType":"string","Properties":{"Ordinal":2}},'
        '{"Column":"Version","DataType":"string","Properties":{"Ordinal":3}},'
        '{"Column":"CatalogCommitTimestamp","DataType":"datetime","Properties":{"Ordinal":4}},'
        '{"Column":"Created","DataType":"datetime","Properties":{"Ordinal":5}},'
        '{"Column":"ResultType","DataType":"string","Properties":{"Ordinal":6}},'
        '{"Column":"PatternSet","DataType":"string","Properties":{"Ordinal":7}},'
        '{"Column":"PropertyAnyValue","DataType":"string","Properties":{"Ordinal":8}},'
        '{"Column":"PropertyCodeLanguage","DataType":"string","Properties":{"Ordinal":9}},'
        '{"Column":"PropertyTargetFrameworkMoniker","DataType":"string","Properties":{"Ordinal":10}},'
        '{"Column":"PropertyLocale","DataType":"string","Properties":{"Ordinal":11}},'
        '{"Column":"PropertyManagedAssembly","DataType":"string","Properties":{"Ordinal":12}},'
        '{"Column":"PropertyMSBuild","DataType":"string","Properties":{"Ordinal":13}},'
        '{"Column":"PropertyRuntimeIdentifier","DataType":"string","Properties":{"Ordinal":14}},'
        '{"Column":"PropertySatelliteAssembly","DataType":"string","Properties":{"Ordinal":15}},'
        '{"Column":"Path","DataType":"string","Properties":{"Ordinal":16}},'
        '{"Column":"FileName","DataType":"string","Properties":{"Ordinal":17}},'
        '{"Column":"FileExtension","DataType":"string","Properties":{"Ordinal":18}},'
        '{"Column":"TopLevelFolder","DataType":"string","Properties":{"Ordinal":19}},'
        '{"Column":"RoundTripTargetFrameworkMoniker","DataType":"string","Properties":{"Ordinal":20}},'
        '{"Column":"FrameworkName","DataType":"string","Properties":{"Ordinal":21}},'
        '{"Column":"FrameworkVersion","DataType":"string","Properties":{"Ordinal":22}},'
        '{"Column":"FrameworkProfile","DataType":"string","Properties":{"Ordinal":23}},'
        '{"Column":"PlatformName","DataType":"string","Properties":{"Ordinal":24}},'
        '{"Column":"PlatformVersion","DataType":"string","Properties":{"Ordinal":25}}'
    ']'

    */
    partial record PackageAsset
    {
        public void Write(TextWriter writer)
        {
            writer.Write(ScanId);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(Created));
            writer.Write(',');
            writer.Write(ResultType);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PatternSet);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyAnyValue);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyCodeLanguage);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyTargetFrameworkMoniker);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyLocale);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyManagedAssembly);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyMSBuild);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyRuntimeIdentifier);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertySatelliteAssembly);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Path);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FileName);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FileExtension);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, TopLevelFolder);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, RoundTripTargetFrameworkMoniker);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FrameworkName);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FrameworkVersion);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FrameworkProfile);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PlatformName);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PlatformVersion);
            writer.WriteLine();
        }

        public PackageAsset Read(Func<string> getNextField)
        {
            return new PackageAsset
            {
                ScanId = CsvUtility.ParseNullable(getNextField(), Guid.Parse),
                ScanTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                Id = getNextField(),
                Version = getNextField(),
                CatalogCommitTimestamp = CsvUtility.ParseDateTimeOffset(getNextField()),
                Created = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                ResultType = Enum.Parse<PackageAssetResultType>(getNextField()),
                PatternSet = getNextField(),
                PropertyAnyValue = getNextField(),
                PropertyCodeLanguage = getNextField(),
                PropertyTargetFrameworkMoniker = getNextField(),
                PropertyLocale = getNextField(),
                PropertyManagedAssembly = getNextField(),
                PropertyMSBuild = getNextField(),
                PropertyRuntimeIdentifier = getNextField(),
                PropertySatelliteAssembly = getNextField(),
                Path = getNextField(),
                FileName = getNextField(),
                FileExtension = getNextField(),
                TopLevelFolder = getNextField(),
                RoundTripTargetFrameworkMoniker = getNextField(),
                FrameworkName = getNextField(),
                FrameworkVersion = getNextField(),
                FrameworkProfile = getNextField(),
                PlatformName = getNextField(),
                PlatformVersion = getNextField(),
            };
        }
    }
}
