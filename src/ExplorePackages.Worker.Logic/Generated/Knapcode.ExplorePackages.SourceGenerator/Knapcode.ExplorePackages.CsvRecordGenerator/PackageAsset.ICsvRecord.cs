// <auto-generated />
using System;
using System.IO;
using Knapcode.ExplorePackages;

namespace Knapcode.ExplorePackages.Worker.FindPackageAssets
{
    /* Kusto DDL:

    .drop table JverPackageAssets;

    .create table JverPackageAssets (
        ScanId: guid,
        ScanTimestamp: datetime,
        Id: string,
        Version: string,
        CatalogCommitTimestamp: datetime,
        Created: datetime,
        ResultType: string,
        PatternSet: string,
        PropertyAnyValue: string,
        PropertyCodeLanguage: string,
        PropertyTargetFrameworkMoniker: string,
        PropertyLocale: string,
        PropertyManagedAssembly: string,
        PropertyMSBuild: string,
        PropertyRuntimeIdentifier: string,
        PropertySatelliteAssembly: string,
        Path: string,
        FileName: string,
        FileExtension: string,
        TopLevelFolder: string,
        RoundTripTargetFrameworkMoniker: string,
        FrameworkName: string,
        FrameworkVersion: string,
        FrameworkProfile: string,
        PlatformName: string,
        PlatformVersion: string
    );

    .create table JverPackageAssets ingestion csv mapping 'JverPackageAssets_mapping' '[{"Name":"ScanId","Ordinal":0,"DataType":"guid"},{"Name":"ScanTimestamp","Ordinal":1,"DataType":"datetime"},{"Name":"Id","Ordinal":2,"DataType":"string"},{"Name":"Version","Ordinal":3,"DataType":"string"},{"Name":"CatalogCommitTimestamp","Ordinal":4,"DataType":"datetime"},{"Name":"Created","Ordinal":5,"DataType":"datetime"},{"Name":"ResultType","Ordinal":6,"DataType":"string"},{"Name":"PatternSet","Ordinal":7,"DataType":"string"},{"Name":"PropertyAnyValue","Ordinal":8,"DataType":"string"},{"Name":"PropertyCodeLanguage","Ordinal":9,"DataType":"string"},{"Name":"PropertyTargetFrameworkMoniker","Ordinal":10,"DataType":"string"},{"Name":"PropertyLocale","Ordinal":11,"DataType":"string"},{"Name":"PropertyManagedAssembly","Ordinal":12,"DataType":"string"},{"Name":"PropertyMSBuild","Ordinal":13,"DataType":"string"},{"Name":"PropertyRuntimeIdentifier","Ordinal":14,"DataType":"string"},{"Name":"PropertySatelliteAssembly","Ordinal":15,"DataType":"string"},{"Name":"Path","Ordinal":16,"DataType":"string"},{"Name":"FileName","Ordinal":17,"DataType":"string"},{"Name":"FileExtension","Ordinal":18,"DataType":"string"},{"Name":"TopLevelFolder","Ordinal":19,"DataType":"string"},{"Name":"RoundTripTargetFrameworkMoniker","Ordinal":20,"DataType":"string"},{"Name":"FrameworkName","Ordinal":21,"DataType":"string"},{"Name":"FrameworkVersion","Ordinal":22,"DataType":"string"},{"Name":"FrameworkProfile","Ordinal":23,"DataType":"string"},{"Name":"PlatformName","Ordinal":24,"DataType":"string"},{"Name":"PlatformVersion","Ordinal":25,"DataType":"string"}]'

    */
    partial class PackageAsset
    {
        public void Write(TextWriter writer)
        {
            writer.Write(ScanId);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(Created));
            writer.Write(',');
            writer.Write(ResultType);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PatternSet);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyAnyValue);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyCodeLanguage);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyTargetFrameworkMoniker);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyLocale);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyManagedAssembly);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyMSBuild);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertyRuntimeIdentifier);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PropertySatelliteAssembly);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Path);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FileName);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FileExtension);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, TopLevelFolder);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, RoundTripTargetFrameworkMoniker);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FrameworkName);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FrameworkVersion);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, FrameworkProfile);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PlatformName);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, PlatformVersion);
            writer.WriteLine();
        }

        public void Read(Func<string> getNextField)
        {
            ScanId = CsvUtility.ParseNullable(getNextField(), Guid.Parse);
            ScanTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset);
            Id = getNextField();
            Version = getNextField();
            CatalogCommitTimestamp = CsvUtility.ParseDateTimeOffset(getNextField());
            Created = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset);
            ResultType = Enum.Parse<PackageAssetResultType>(getNextField());
            PatternSet = getNextField();
            PropertyAnyValue = getNextField();
            PropertyCodeLanguage = getNextField();
            PropertyTargetFrameworkMoniker = getNextField();
            PropertyLocale = getNextField();
            PropertyManagedAssembly = getNextField();
            PropertyMSBuild = getNextField();
            PropertyRuntimeIdentifier = getNextField();
            PropertySatelliteAssembly = getNextField();
            Path = getNextField();
            FileName = getNextField();
            FileExtension = getNextField();
            TopLevelFolder = getNextField();
            RoundTripTargetFrameworkMoniker = getNextField();
            FrameworkName = getNextField();
            FrameworkVersion = getNextField();
            FrameworkProfile = getNextField();
            PlatformName = getNextField();
            PlatformVersion = getNextField();
        }
    }
}
