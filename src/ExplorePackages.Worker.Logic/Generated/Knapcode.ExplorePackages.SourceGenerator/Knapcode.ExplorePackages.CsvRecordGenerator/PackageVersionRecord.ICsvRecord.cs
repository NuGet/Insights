// <auto-generated />

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Knapcode.ExplorePackages;

namespace Knapcode.ExplorePackages.Worker.PackageVersionToCsv
{
    /* Kusto DDL:

    .drop table JverPackageVersions ifexists;

    .create table JverPackageVersions (
        ScanId: guid,
        ScanTimestamp: datetime,
        LowerId: string,
        Identity: string,
        Id: string,
        Version: string,
        CatalogCommitTimestamp: datetime,
        Created: datetime,
        ResultType: string,
        IsListed: bool,
        SemVer2: bool,
        SemVerType: string,
        IsLatest: bool,
        IsLatestStable: bool,
        IsLatestSemVer2: bool,
        IsLatestStableSemVer2: bool
    );

    .alter-merge table JverPackageVersions policy retention softdelete = 30d;

    .alter table JverPackageVersions policy partitioning '{'
      '"PartitionKeys": ['
        '{'
          '"ColumnName": "Identity",'
          '"Kind": "Hash",'
          '"Properties": {'
            '"Function": "XxHash64",'
            '"MaxPartitionCount": 256'
          '}'
        '}'
      ']'
    '}';

    .create table JverPackageVersions ingestion csv mapping 'JverPackageVersions_mapping'
    '['
        '{"Column":"ScanId","DataType":"guid","Properties":{"Ordinal":0}},'
        '{"Column":"ScanTimestamp","DataType":"datetime","Properties":{"Ordinal":1}},'
        '{"Column":"LowerId","DataType":"string","Properties":{"Ordinal":2}},'
        '{"Column":"Identity","DataType":"string","Properties":{"Ordinal":3}},'
        '{"Column":"Id","DataType":"string","Properties":{"Ordinal":4}},'
        '{"Column":"Version","DataType":"string","Properties":{"Ordinal":5}},'
        '{"Column":"CatalogCommitTimestamp","DataType":"datetime","Properties":{"Ordinal":6}},'
        '{"Column":"Created","DataType":"datetime","Properties":{"Ordinal":7}},'
        '{"Column":"ResultType","DataType":"string","Properties":{"Ordinal":8}},'
        '{"Column":"IsListed","DataType":"bool","Properties":{"Ordinal":9}},'
        '{"Column":"SemVer2","DataType":"bool","Properties":{"Ordinal":10}},'
        '{"Column":"SemVerType","DataType":"string","Properties":{"Ordinal":11}},'
        '{"Column":"IsLatest","DataType":"bool","Properties":{"Ordinal":12}},'
        '{"Column":"IsLatestStable","DataType":"bool","Properties":{"Ordinal":13}},'
        '{"Column":"IsLatestSemVer2","DataType":"bool","Properties":{"Ordinal":14}},'
        '{"Column":"IsLatestStableSemVer2","DataType":"bool","Properties":{"Ordinal":15}}'
    ']'

    */
    partial record PackageVersionRecord
    {
        public int FieldCount => 16;

        public void WriteHeader(TextWriter writer)
        {
            writer.WriteLine("ScanId,ScanTimestamp,LowerId,Identity,Id,Version,CatalogCommitTimestamp,Created,ResultType,IsListed,SemVer2,SemVerType,IsLatest,IsLatestStable,IsLatestSemVer2,IsLatestStableSemVer2");
        }

        public void Write(List<string> fields)
        {
            fields.Add(ScanId.ToString());
            fields.Add(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            fields.Add(LowerId);
            fields.Add(Identity);
            fields.Add(Id);
            fields.Add(Version);
            fields.Add(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            fields.Add(CsvUtility.FormatDateTimeOffset(Created));
            fields.Add(ResultType.ToString());
            fields.Add(CsvUtility.FormatBool(IsListed));
            fields.Add(CsvUtility.FormatBool(SemVer2));
            fields.Add(SemVerType.ToString());
            fields.Add(CsvUtility.FormatBool(IsLatest));
            fields.Add(CsvUtility.FormatBool(IsLatestStable));
            fields.Add(CsvUtility.FormatBool(IsLatestSemVer2));
            fields.Add(CsvUtility.FormatBool(IsLatestStableSemVer2));
        }

        public void Write(TextWriter writer)
        {
            writer.Write(ScanId);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, LowerId);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Identity);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Id);
            writer.Write(',');
            CsvUtility.WriteWithQuotes(writer, Version);
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            writer.Write(',');
            writer.Write(CsvUtility.FormatDateTimeOffset(Created));
            writer.Write(',');
            writer.Write(ResultType);
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(IsListed));
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(SemVer2));
            writer.Write(',');
            writer.Write(SemVerType);
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(IsLatest));
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(IsLatestStable));
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(IsLatestSemVer2));
            writer.Write(',');
            writer.Write(CsvUtility.FormatBool(IsLatestStableSemVer2));
            writer.WriteLine();
        }

        public async Task WriteAsync(TextWriter writer)
        {
            await writer.WriteAsync(ScanId.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(ScanTimestamp));
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, LowerId);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Identity);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Id);
            await writer.WriteAsync(',');
            await CsvUtility.WriteWithQuotesAsync(writer, Version);
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(CatalogCommitTimestamp));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatDateTimeOffset(Created));
            await writer.WriteAsync(',');
            await writer.WriteAsync(ResultType.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(IsListed));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(SemVer2));
            await writer.WriteAsync(',');
            await writer.WriteAsync(SemVerType.ToString());
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(IsLatest));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(IsLatestStable));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(IsLatestSemVer2));
            await writer.WriteAsync(',');
            await writer.WriteAsync(CsvUtility.FormatBool(IsLatestStableSemVer2));
            await writer.WriteLineAsync();
        }

        public PackageVersionRecord Read(Func<string> getNextField)
        {
            return new PackageVersionRecord
            {
                ScanId = CsvUtility.ParseNullable(getNextField(), Guid.Parse),
                ScanTimestamp = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                LowerId = getNextField(),
                Identity = getNextField(),
                Id = getNextField(),
                Version = getNextField(),
                CatalogCommitTimestamp = CsvUtility.ParseDateTimeOffset(getNextField()),
                Created = CsvUtility.ParseNullable(getNextField(), CsvUtility.ParseDateTimeOffset),
                ResultType = Enum.Parse<PackageVersionResultType>(getNextField()),
                IsListed = CsvUtility.ParseNullable(getNextField(), bool.Parse),
                SemVer2 = CsvUtility.ParseNullable(getNextField(), bool.Parse),
                SemVerType = CsvUtility.ParseNullable(getNextField(), Enum.Parse<Knapcode.ExplorePackages.SemVerType>),
                IsLatest = bool.Parse(getNextField()),
                IsLatestStable = bool.Parse(getNextField()),
                IsLatestSemVer2 = bool.Parse(getNextField()),
                IsLatestStableSemVer2 = bool.Parse(getNextField()),
            };
        }
    }
}
