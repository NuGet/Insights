@model CatalogScanViewModel

<a name="@Model.DriverType" class="anchor"></a>
@{ 
    var error = TempData[Model.DriverType + ".Error"]?.ToString();
    var success = TempData[Model.DriverType + ".Success"]?.ToString();
    var hasError = !string.IsNullOrEmpty(error);
    var hasSuccess = !hasError && !string.IsNullOrEmpty(success);
    var message = error ?? success;
    var messageFontClass = hasError || hasSuccess ? "text-white" : string.Empty;
    var messageBgClass = hasError ? "bg-danger" : (hasSuccess ? "bg-success" : string.Empty);
    var borderClass = hasError ? "border-danger" : (hasSuccess ? "border-success" : string.Empty);
}
<div class="card @borderClass mt-3">
    <h4 class="card-header">@Model.DriverType.ToString().Humanize()</h4>

    <ul class="list-group list-group-flush">
        <li class="list-group-item"><b>Cursor value:</b> @Model.Cursor.Value.ToZulu()</li>
        <li class="list-group-item"><b>Cursor age:</b> @Model.CursorAge.Humanize(precision: 7, maxUnit: Humanizer.Localisation.TimeUnit.Year, minUnit: Humanizer.Localisation.TimeUnit.Second)</li>
    </ul>

    <div class="card-body">
        <form asp-action="UpdateCatalogScan" method="post">
            <input type="hidden" name="driverType" value="@Model.DriverType" />
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="@Model.DriverType.ToString()-useCustomMax" name="useCustomMax" value="true" />
                <label class="form-check-label" for="@Model.DriverType.ToString()-useCustomMax">Use custom max</label>
            </div>
            <div class="form-group custom-max" style="display: none">
                <label for="@Model.DriverType-max">Custom max</label>
                <input type="text" class="form-control" name="max" id="@Model.DriverType-max" value="@Model.DefaultMax.ToZulu()">
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="@Model.DriverType.ToString()-onlyLatestLeaves" name="onlyLatestLeaves" checked="@Model.DefaultOnlyLatestLeaves" value="true" />
                <label class="form-check-label" for="@Model.DriverType.ToString()-onlyLatestLeaves">Only latest leaves</label>
            </div>
            <button type="submit" class="btn btn-primary">Start</button>
        </form>
    </div>


    @if (message != null)
    {
        <ul class="list-group list-group-flush">
            <li class="list-group-item @messageFontClass @messageBgClass">@Html.Raw(message)</li>
        </ul>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Scan ID</th>
                <th>State</th>
                <th>Min</th>
                <th>Max</th>
                <th>Runtime</th>
            </tr>
        </thead>
        <tbody class="smaller-text">
            @foreach (var scan in Model.LatestScans)
            {
                <tr>
                    <td>@scan.ScanId</td>
                    <td>@scan.ParsedState</td>
                    <td>@scan.Min?.ToZulu()</td>
                    <td>@scan.Max?.ToZulu()</td>
                    <td>
                        @if (scan.Started.HasValue)
                        {
                            var runtime = scan.Completed.GetValueOrDefault(DateTimeOffset.UtcNow) - scan.Started.Value;
                            var runtimeStr = runtime.ToString("d\\.hh\\:mm\\:ss");
                            if (runtimeStr.StartsWith("0."))
                            {
                                runtimeStr = runtimeStr.Substring(2);
                            }
                            <text>@runtimeStr</text>
                        }
                    </td>
                </tr>
            }

            @if (Model.LatestScans.Count == 0)
            {
                <tr>
                    <td colspan="5" class="text-center">
                        <i>No scans have been started.</i>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
