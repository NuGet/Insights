@model ExploreViewModel
@using Knapcode.ExplorePackages.Website.Logic;
@{
    ViewData["Title"] = "Home";
}

<div class="row">
    <div class="col-xs-12">
        <h2>@ViewData["Title"]</h2>

        <p>Enter a package ID and version below to check its consistency on the various NuGet API endpoints on NuGet.org.</p>
        <form id="getReportForm">
            <div class="form-group">
                <label for="packageId">Package ID</label>
                <input type="text" class="form-control" name="id" id="packageId" value="@Model.Id">
            </div>
            <div class="form-group">
                <label for="packageVersion">Package Version</label>
                <input type="text" class="form-control" name="version" id="packageVersion" value="@Model.Version">
            </div>
            <button type="submit" id="getReport" class="btn btn-primary">Explore</button>
            <button type="button" id="getLatestV2" class="btn btn-default">Find Latest V2 Package</button>
            <button type="button" id="getLatestCatalog" class="btn btn-default">Find Latest Catalog Package</button>
        </form>

        <hr />

        <div>
            <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active">
                    <a href="#progress" aria-controls="progress" role="tab" data-toggle="tab" id="progressTab">
                        Progress
                    </a>
                </li>
                <li role="presentation">
                    <a href="#urls" aria-controls="urls" role="tab" data-toggle="tab" id="urlsTab">
                        URLs
                    </a>
                </li>
                <li role="presentation" class="disabled">
                    <a href="#report" aria-controls="report" role="tab" data-toggle="tab" id="reportTab">
                        Report
                    </a>
                <li role="presentation" class="disabled">
                    <a href="#reportData" aria-controls="reportData" role="tab" data-toggle="tab" id="reportDataTab">
                        Data
                    </a>
                </li>
            </ul>
            <br />
            <div class="tab-content">
                <div role="tabpanel" class="tab-pane active" id="progress">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped" role="progressbar" aria-valuenow="0" aria-valuemin="0"
                             aria-valuemax="100" style="width: 0%;" id="progressBar">
                            <span class="sr-only">0% Complete</span>
                        </div>
                    </div>
                    <div id="statuses"></div>
                </div>
                <div role="tabpanel" class="tab-pane" id="report">
                </div>
                <div role="tabpanel" class="tab-pane" id="reportData">
                </div>
                <div role="tabpanel" class="tab-pane" id="urls">
                </div>
            </div>
        </div>
    </div>
</div>

<script id="http-sessions-template" type="text/x-handlebars-template">
    <table class="table table-condensed">
        <thead>
            <tr>
                <th>Method</th>
                <th>URL</th>
                <th>Result</th>
                <th>Duration</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</script>

<script id="http-session-template" type="text/x-handlebars-template">
    <tr>
        <td>{{method}}</td>
        <td><a href="{{requestUri}}" target="_blank">{{requestUri}}</a></td>
        <td>{{statusCode}} {{reasonPhrase}}</td>
        <td>
            {{#if duration}}
                {{duration}} seconds
            {{/if}}
        </td>
    </tr>
</script>

<script id="report-template" type="text/x-handlebars-template">
    <h3>Overview</h3>
    <table class="table table-condensed table-report">
        <tbody>
            <tr class="{{consistentclass @@root}}">
                <th>Consistent?</th>
                <td>{{yesno isConsistent}}</td>
            </tr>
            <tr>
                <th>ID</th>
                <td>{{package.id}}</td>
            </tr>
            <tr>
                <th>Normalized version</th>
                <td>{{package.normalizedVersion}}</td>
            </tr>
            <tr>
                <th>Full version</th>
                <td>{{package.fullVersion}}</td>
            </tr>
            <tr>
                <th>Deleted status</th>
                <td>{{package.deletedStatus}}</td>
            </tr>
            <tr>
                <th>SemVer 2?</th>
                <td>{{yesno package.isSemVer2}}</td>
            </tr>
            <tr>
                <th>Listed?</th>
                <td>{{yesno package.isListed}}</td>
            </tr>
        </tbody>
    </table>

    <h3>V2</h3>
    <table class="table table-condensed table-report">
        <tbody>
            <tr class="{{consistentclass v2}}">
                <th>Consistent?</th>
                <td>{{yesno v2.isConsistent}}</td>
            </tr>
            <tr>
                <th>In SemVer 1?</th>
                <td>{{yesno v2.hasPackageSemVer1}}</td>
            </tr>
            <tr>
                <th>In SemVer 2?</th>
                <td>{{yesno v2.hasPackageSemVer2}}</td>
            </tr>
            <tr>
                <th>Listed in SemVer 1?</th>
                <td>{{yesno v2.isListedSemVer1}}</td>
            </tr>
            <tr>
                <th>Listed in SemVer 2?</th>
                <td>{{yesno v2.isListedSemVer2}}</td>
            </tr>
        </tbody>
    </table>

    <h3>Packages container</h3>
    <table class="table table-condensed table-report">
        <tbody>
            <tr class="{{consistentclass packagesContainer}}">
                <th>Consistent?</th>
                <td>{{yesno packagesContainer.isConsistent}}</td>
            </tr>
            <tr>
                <th>Content exists?</th>
                <td>{{yesno packagesContainer.packageContentMetadata.exists}}</td>
            </tr>
            <tr>
                <th>Package MD5</th>
                <td>
                    {{#if packagesContainer.packageContentMetadata.contentMD5}}
                        <code>{{packagesContainer.packageContentMetadata.contentMD5}}</code>
                        (<code>{{hextobase64 packagesContainer.packageContentMetadata.contentMD5}}</code>)
                    {{/if}}
                </td>
            </tr>
            <tr>
                <th>Has MD5 header?</th>
                <td>{{yesno packagesContainer.packageContentMetadata.hasContentMD5Header}}
                </td>
            </tr>
        </tbody>
    </table>

    <h3>Flat container</h3>
    <table class="table table-condensed table-report">
        <tbody>
            <tr class="{{consistentclass flatContainer}}">
                <th>Consistent?</th>
                <td>{{yesno flatContainer.isConsistent}}</td>
            </tr>
            <tr>
                <th>Content exists?</th>
                <td>{{yesno flatContainer.packageContentMetadata.exists}}</td>
            </tr>
            <tr>
                <th>Manifest exists?</th>
                <td>{{yesno flatContainer.hasPackageManifest}}</td>
            </tr>
            <tr>
                <th>In index?</th>
                <td>{{yesno flatContainer.isInIndex}}</td>
            </tr>
            <tr>
                <th>Package MD5</th>
                <td>
                    {{#if flatContainer.packageContentMetadata.contentMD5}}
                        <code>{{flatContainer.packageContentMetadata.contentMD5}}</code>
                        (<code>{{hextobase64 flatContainer.packageContentMetadata.contentMD5}}</code>)
                    {{/if}}
                </td>
            </tr>
            <tr>
                <th>Has MD5 header?</th>
                <td>{{yesno flatContainer.packageContentMetadata.hasContentMD5Header}}
                </td>
            </tr>
        </tbody>
    </table>

    <h3>Registration hives</h3>
    <table class="table table-condensed table-report">
        <thead>
            <tr class="{{consistentclass registration}}">
                <th>Consistent?</th>
                <td colspan="3">{{yesno registration.isConsistent}}</td>
            </tr>
            <tr>
                <th></th>
                <th>Original</th>
                <th>Gzipped</th>
                <th>SemVer 2.0.0</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>Consistent?</th>
                <td>{{yesno registrationOriginal.isConsistent}}</td>
                <td>{{yesno registrationGzipped.isConsistent}}</td>
                <td>{{yesno registrationSemVer2.isConsistent}}</td>
            </tr>
            <tr>
                <th>In index?</th>
                <td>{{yesno registrationOriginal.isInIndex}}</td>
                <td>{{yesno registrationGzipped.isInIndex}}</td>
                <td>{{yesno registrationSemVer2.isInIndex}}</td>
            </tr>
            <tr>
                <th>Has leaf? <a target="_blank" href="https://github.com/NuGet/NuGetGallery/issues/4475">*</a></th>
                <td>{{yesno registrationOriginal.hasLeaf}}</td>
                <td>{{yesno registrationGzipped.hasLeaf}}</td>
                <td>{{yesno registrationSemVer2.hasLeaf}}</td>
            </tr>
            <tr>
                <th>Listed in index?</th>
                <td>{{yesno registrationOriginal.isListedInIndex}}</td>
                <td>{{yesno registrationGzipped.isListedInIndex}}</td>
                <td>{{yesno registrationSemVer2.isListedInIndex}}</td>
            </tr>
            <tr>
                <th>Listed in leaf?</th>
                <td>{{yesno registrationOriginal.isListedInLeaf}}</td>
                <td>{{yesno registrationGzipped.isListedInLeaf}}</td>
                <td>{{yesno registrationSemVer2.isListedInLeaf}}</td>
            </tr>
        </tbody>
    </table>

    <h3>Search service</h3>
    <table class="table table-condensed table-report">
        <thead>
            <tr class="{{consistentclass search}}">
                <th>Consistent?</th>
                <td colspan="{{search.statuses.length}}">{{yesno search.isConsistent}}</td>
            </tr>
            <tr>
                <th></th>
                {{#each search.statuses}}
                <th>{{hostName}}</th>
                {{/each}}
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>In SemVer 1?</th>
                {{#each search.statuses}}
                <td>{{hasPackageSemVer1}}</td>
                {{/each}}
            </tr>
            <tr>
                <th>In SemVer 2?</th>
                {{#each search.statuses}}
                <td>{{hasPackageSemVer2}}</td>
                {{/each}}
            </tr>
            <tr>
                <th>Listed in SemVer 1?</th>
                {{#each search.statuses}}
                <td>{{isListedSemVer1}}</td>
                {{/each}}
            </tr>
            <tr>
                <th>Listed in SemVer 2?</th>
                {{#each search.statuses}}
                <td>{{isListedSemVer2}}</td>
                {{/each}}
            </tr>
        </tbody>
    </table>

    <h3>Cross check</h3>
    <table class="table table-condensed table-report">
        <tbody>
            <tr class="{{consistentclass crossCheck}}">
                <th>Consistent?</th>
                <td>{{yesno crossCheck.isConsistent}}</td>
            </tr>
            <tr>
                <th>Same package MD5?</th>
                <td>{{yesno crossCheck.doPackageContentsMatch}}</td>
            </tr>
        </tbody>
    </table>
</script>

@section Scripts {
    <script>
        Handlebars.registerHelper('yesno', function (value) {
            return value ? "Yes" : "No";
        });

        Handlebars.registerHelper('hextobase64', function (value) {
            return hexToBase64(value);
        });

        Handlebars.registerHelper('consistentclass', function (report) {
            return report.isConsistent ? "success" : "danger";
        });

        var httpSessionsTemplate = Handlebars.compile($("#http-sessions-template").html());
        var httpSessionTemplate = Handlebars.compile($("#http-session-template").html());
        var reportTemplate = Handlebars.compile($("#report-template").html());

        function parseUrl(url) {
            var a = document.createElement('a');
            a.href = url;
            return a;
        }

        // Source: https://stackoverflow.com/a/41797377
        function hexToBase64(hexstring) {
            return btoa(hexstring.match(/\w{2}/g).map(function (a) {
                return String.fromCharCode(parseInt(a, 16));
            }).join(""));
        }

        function pushExploreUrl(id, version) {
            document.title = id + " " + version + "- ExplorePackages";
            history.pushState({}, "", "/Home/Explore/" + id + "/" + version);
        }

        function HttpSession() {
            this.method = null;
            this.requestUri = null;
            this.statusCode = null;
            this.reasonPhrase = null;
            this.duration = null;
            this.$row = null;

            var self = this;

            this.update = function () {
                var $newRow = $(httpSessionTemplate(self));

                if (self.$row) {
                    self.$row.replaceWith($newRow);
                } 

                self.$row = $newRow;
            }
        }

        function ViewModel(report) {
            function getDeletedStatus(status) {
                switch (status) {
                    case "SoftDeleted":
                        return "Soft deleted";
                        break;
                    case "NotDeleted":
                        return "Not deleted";
                        break;
                    case "Unknown":
                        return "Never pushed or hard deleted";
                        break;
                }
            }

            function getSearchHostStatuses(baseUrlToFlag) {
                var searchHostCounts = {};
                $.each(baseUrlToFlag, function (baseUrl, flag) {
                    var hostName = parseUrl(baseUrl).hostname;
                    if (!(hostName in searchHostCounts)) {
                        searchHostCounts[hostName] = { true: 0, false: 0 };
                    }

                    searchHostCounts[hostName][flag]++;
                });
                var searchHostStatuses = {};
                $.each(searchHostCounts, function (hostName, counts) {
                    var status;
                    if (counts[false] == 0) {
                        status = "Yes";
                    } else if (counts[true] == 0) {
                        status = "No";
                    } else {
                        status = "Partially (" + counts[true] + "/" + (counts[true] + counts[false]) + " instances)";
                    }

                    searchHostStatuses[hostName] = status;
                });

                return searchHostStatuses;
            }

            function groupSearchHostStatus(search) {
                var hasPackageSemVer1 = getSearchHostStatuses(search.baseUrlHasPackageSemVer1);
                var hasPackageSemVer2 = getSearchHostStatuses(search.baseUrlHasPackageSemVer2);
                var isListedSemVer1 = getSearchHostStatuses(search.baseUrlIsListedSemVer1);
                var isListedSemVer2 = getSearchHostStatuses(search.baseUrlIsListedSemVer2);
                var statuses = [];

                $.each(hasPackageSemVer1, function (hostName, value) {
                    statuses.push({
                        hostName: hostName,
                        hasPackageSemVer1: value,
                        hasPackageSemVer2: hasPackageSemVer2[hostName],
                        isListedSemVer1: isListedSemVer1[hostName],
                        isListedSemVer2: isListedSemVer2[hostName]
                    });
                });

                statuses.sort(function (a, b) {
                    if (a.hostName < b.hostName) {
                        return -1;
                    } else if (a.hostName > b.hostName) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                return statuses;
            }

            // Verbatim copies
            this.isConsistent = report.isConsistent;
            this.v2 = report.v2;
            this.packagesContainer = report.packagesContainer;
            this.flatContainer = report.flatContainer;
            this.registrationOriginal = report.registrationOriginal;
            this.registrationGzipped = report.registrationGzipped;
            this.registrationSemVer2 = report.registrationSemVer2;
            this.crossCheck = report.crossCheck;

            // Package details
            this.package = {
                id: report.context.package.id,
                normalizedVersion: report.context.package.version,
                fullVersion: report.context.fullVersion,
                isSemVer2: report.context.isSemVer2,
                isListed: report.gallery.packageState.isListed,
                deletedStatus: getDeletedStatus(report.gallery.packageState.packageDeletedStatus)
            };

            // Registration hives
            this.registration = {
                isConsistent: report.registrationOriginal.isConsistent
                && report.registrationGzipped.isConsistent
                && report.registrationSemVer2.isConsistent
            }

            // Search service
            this.search = {
                isConsistent: report.search.isConsistent,
                statuses: groupSearchHostStatus(report.search)
            };
        };

        $(function () {
            var $progressBar = $("#progressBar");
            var $progressBarText = $("#progressBar .sr-only");
            var $statuses = $("#statuses");
            var $packageId = $("#packageId");
            var $packageVersion = $("#packageVersion");
            var $getReport = $("#getReport");
            var $getLatestV2 = $("#getLatestV2");
            var $getLatestCatalog = $("#getLatestCatalog");
            var $progressTab = $("#progressTab");
            var $reportTab = $("#reportTab");
            var $reportDataTab = $("#reportDataTab");
            var $urlsTab = $("#urlsTab");
            var $report = $("#report");
            var $reportData = $("#reportData");
            var $urls = $("#urls");

            var httpSessions = {};

            $packageId.add($packageVersion).on("paste", function (e) {
                var pastedText = (e.originalEvent.clipboardData.getData("text") || "").trim();
                var pieces = pastedText.split(/[ \/]/, 2);
                if (pieces.length > 1) {
                    $packageId.val(pieces[0].trim());
                    $packageVersion.val(pieces[1].trim());
                    return false;
                }
            });

            $reportTab.click(function () {
                if ($reportTab.parent().hasClass("disabled")) {
                    return false;
                }
            });

            $reportDataTab.click(function () {
                if ($reportDataTab.parent().hasClass("disabled")) {
                    return false;
                }
            });

            function setProgress(percent) {
                percent = Math.round(100 * percent);
                if (percent == 0) {
                    $progressBar.addClass('notransition');
                }
                $progressBar.attr('aria-valuenow', percent);
                $progressBar.css('width', percent + '%');
                $progressBarText.text(percent + '% complete');
                $progressBar[0].offsetHeight;
                if (percent == 0) {
                    $progressBar.removeClass('notransition');
                }
            }

            function addStatus(html) {
                if ($statuses.children().length == 0) {
                    $statuses.append($("<pre></pre>"))
                }

                $statuses.find("pre").append(html + "\n");
            }

            var inProgress = false;

            function resetForm() {
                $report.empty();
                $reportData.empty();
                $statuses.empty();
                $urls.empty();
                $reportTab.parent().attr("class", "disabled");
                $reportDataTab.parent().attr("class", "disabled");
                $progressTab.tab('show');
                setProgress(0);
                httpSessions = {};
            }

            function lockForm() {
                inProgress = true;
                $getReport.prop("disabled", true);
                $getLatestV2.prop("disabled", true);
                $getLatestCatalog.prop("disabled", true);
                $progressBar.addClass("active");
            }

            function unlockForm() {
                inProgress = false;
                $getReport.prop("disabled", false);
                $getLatestV2.prop("disabled", false);
                $getLatestCatalog.prop("disabled", false);
                $progressBar.removeClass("active");
            }

            function initializeConnection(callback) {
                var connection = new signalR
                    .HubConnectionBuilder()
                    .configureLogging(signalR.LogLevel.Information)
                    .withUrl(@Json.Serialize(PackageReportHub.Path))
                    .build();

                connection.on('Progress', function (percent, message) {
                    setProgress(percent);
                    addStatus(message);
                });

                function handleHttpSession(id, update) {
                    var isNew = false;
                    if (!(id in httpSessions)) {
                        httpSessions[id] = new HttpSession();
                        isNew = true;
                    }

                    var httpSession = httpSessions[id];
                    update(httpSession);
                    httpSession.update();

                    if (isNew) {
                        if ($urls.children().length == 0) {
                            $urls.append(httpSessionsTemplate({}));
                        }

                        $urls.find('tbody').append(httpSession.$row);
                    }
                }

                connection.on('HttpRequest', function (id, method, requestUri) {
                    handleHttpSession(id, function (httpSession) {
                        httpSession.method = method;
                        httpSession.requestUri = requestUri;
                    });
                });

                connection.on('HttpResponse', function (id, statusCode, reasonPhrase, duration) {
                    handleHttpSession(id, function (httpSession) {
                        httpSession.statusCode = statusCode;
                        httpSession.reasonPhrase = reasonPhrase;
                        httpSession.duration = Math.round(100 * duration) / 100;
                    });
                });

                connection.onclose(function (error) {
                    if (error) {
                        console.log("Connection closed. Error: " + error);
                    } else {
                        console.log("Connection closed");
                    }

                    connection = null;
                });

                connection.on('Error', function (error) {
                    addStatus('Error: ' + error);

                    unlockForm();
                });

                connection.on('FoundLatest', function (data) {
                    addStatus('Found latest.');

                    $packageId.val(data.id);
                    $packageVersion.val(data.version);

                    pushExploreUrl(data.id, data.version);

                    $pre = $("<pre></pre>");
                    $pre.html(JSON.stringify(data, null, 2));
                    $reportData.append($pre);
                    $reportDataTab.parent().attr("class", "");

                    unlockForm();
                });

                connection.on('Complete', function (report) {
                    addStatus('Complete.');

                    $report.append(reportTemplate(new ViewModel(report)));
                    $reportTab.parent().attr("class", "");

                    $pre = $("<pre></pre>");
                    $pre.html(JSON.stringify(report, null, 2));
                    $reportData.append($pre);
                    $reportDataTab.parent().attr("class", "");

                    $reportTab.tab('show');

                    unlockForm();
                });

                connection
                    .start()
                    .then(callback)
                    .catch(function (e) {
                        addStatus('Connection error: ' + e);

                        unlockForm();
                    });

                return connection;
            }

            var connection = null;

            $("#getLatestCatalog, #getLatestV2").click(function () {
                if (inProgress) {
                    return false;
                }

                resetForm();

                var method = this.id === "getLatestV2" ? "GetLatestV2" : "GetLatestCatalog";

                if (connection == null) {
                    connection = initializeConnection(function () {
                        connection.invoke(method);
                    });
                } else {
                    connection.invoke(method);
                }

                lockForm();

                return false;
            })

            $("#getReportForm").on('submit', function () {
                if (inProgress) {
                    return false;
                }

                resetForm();

                var packageId = $packageId.val().trim();
                var packageVersion = $packageVersion.val().trim();

                pushExploreUrl(packageId, packageVersion);

                if (connection == null) {
                    connection = initializeConnection(function () {
                        connection.invoke('Start', packageId, packageVersion);
                    });
                } else {
                    connection.invoke('Start', packageId, packageVersion);
                }

                lockForm();

                return false;
            });

            if (@Json.Serialize(Model.ImmediatelyStart)) {
                $("#getReportForm").submit();
            }
        });
    </script>
}